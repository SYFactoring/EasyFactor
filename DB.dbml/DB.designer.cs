#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CMBC.EasyFactor.DB.dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FOS")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssignBatch(AssignBatch instance);
    partial void UpdateAssignBatch(AssignBatch instance);
    partial void DeleteAssignBatch(AssignBatch instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertClientAccount(ClientAccount instance);
    partial void UpdateClientAccount(ClientAccount instance);
    partial void DeleteClientAccount(ClientAccount instance);
    partial void InsertClientCreditLine(ClientCreditLine instance);
    partial void UpdateClientCreditLine(ClientCreditLine instance);
    partial void DeleteClientCreditLine(ClientCreditLine instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertFactor(Factor instance);
    partial void UpdateFactor(Factor instance);
    partial void DeleteFactor(Factor instance);
    partial void InsertFactorAccount(FactorAccount instance);
    partial void UpdateFactorAccount(FactorAccount instance);
    partial void DeleteFactorAccount(FactorAccount instance);
    partial void InsertFactorCreditLine(FactorCreditLine instance);
    partial void UpdateFactorCreditLine(FactorCreditLine instance);
    partial void DeleteFactorCreditLine(FactorCreditLine instance);
    partial void InsertFinanceBatch(FinanceBatch instance);
    partial void UpdateFinanceBatch(FinanceBatch instance);
    partial void DeleteFinanceBatch(FinanceBatch instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertPaymentBatch(PaymentBatch instance);
    partial void UpdatePaymentBatch(PaymentBatch instance);
    partial void DeletePaymentBatch(PaymentBatch instance);
    #endregion
		
		public DBDataContext() : 
				base(global::CMBC.EasyFactor.Properties.Settings.Default.FOSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AssignBatch> AssignBatches
		{
			get
			{
				return this.GetTable<AssignBatch>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<ClientAccount> ClientAccounts
		{
			get
			{
				return this.GetTable<ClientAccount>();
			}
		}
		
		public System.Data.Linq.Table<ClientCreditLine> ClientCreditLines
		{
			get
			{
				return this.GetTable<ClientCreditLine>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<Factor> Factors
		{
			get
			{
				return this.GetTable<Factor>();
			}
		}
		
		public System.Data.Linq.Table<FactorAccount> FactorAccounts
		{
			get
			{
				return this.GetTable<FactorAccount>();
			}
		}
		
		public System.Data.Linq.Table<FactorCreditLine> FactorCreditLines
		{
			get
			{
				return this.GetTable<FactorCreditLine>();
			}
		}
		
		public System.Data.Linq.Table<FinanceBatch> FinanceBatches
		{
			get
			{
				return this.GetTable<FinanceBatch>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<PaymentBatch> PaymentBatches
		{
			get
			{
				return this.GetTable<PaymentBatch>();
			}
		}
	}
	
	[Table(Name="dbo.AssignBatch")]
	public partial class AssignBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssignBatchNo;
		
		private string _ContractNo;
		
		private string _BatchCurrency;
		
		private System.Nullable<System.DateTime> _BatchDate;
		
		private string _CreateUserName;
		
		private string _CheckResult;
		
		private string _RejectReason;
		
		private string _CheckUserName;
		
		private System.Nullable<System.DateTime> _CheckDate;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignBatchNoChanging(string value);
    partial void OnAssignBatchNoChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnBatchCurrencyChanging(string value);
    partial void OnBatchCurrencyChanged();
    partial void OnBatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBatchDateChanged();
    partial void OnCreateUserNameChanging(string value);
    partial void OnCreateUserNameChanged();
    partial void OnCheckResultChanging(string value);
    partial void OnCheckResultChanged();
    partial void OnRejectReasonChanging(string value);
    partial void OnRejectReasonChanged();
    partial void OnCheckUserNameChanging(string value);
    partial void OnCheckUserNameChanged();
    partial void OnCheckDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckDateChanged();
    #endregion
		
		public AssignBatch()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Contract = default(EntityRef<Contract>);
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[Column(Storage="_AssignBatchNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AssignBatchNo
		{
			get
			{
				return this._AssignBatchNo;
			}
			set
			{
				if ((this._AssignBatchNo != value))
				{
					this.OnAssignBatchNoChanging(value);
					this.SendPropertyChanging();
					this._AssignBatchNo = value;
					this.SendPropertyChanged("AssignBatchNo");
					this.OnAssignBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[Column(Storage="_BatchCurrency", DbType="NChar(3)")]
		public string BatchCurrency
		{
			get
			{
				return this._BatchCurrency;
			}
			set
			{
				if ((this._BatchCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchCurrencyChanging(value);
					this.SendPropertyChanging();
					this._BatchCurrency = value;
					this.SendPropertyChanged("BatchCurrency");
					this.OnBatchCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_BatchDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BatchDate
		{
			get
			{
				return this._BatchDate;
			}
			set
			{
				if ((this._BatchDate != value))
				{
					this.OnBatchDateChanging(value);
					this.SendPropertyChanging();
					this._BatchDate = value;
					this.SendPropertyChanged("BatchDate");
					this.OnBatchDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserName", DbType="NVarChar(50)")]
		public string CreateUserName
		{
			get
			{
				return this._CreateUserName;
			}
			set
			{
				if ((this._CreateUserName != value))
				{
					this.OnCreateUserNameChanging(value);
					this.SendPropertyChanging();
					this._CreateUserName = value;
					this.SendPropertyChanged("CreateUserName");
					this.OnCreateUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_CheckResult", DbType="NChar(10)")]
		public string CheckResult
		{
			get
			{
				return this._CheckResult;
			}
			set
			{
				if ((this._CheckResult != value))
				{
					this.OnCheckResultChanging(value);
					this.SendPropertyChanging();
					this._CheckResult = value;
					this.SendPropertyChanged("CheckResult");
					this.OnCheckResultChanged();
				}
			}
		}
		
		[Column(Storage="_RejectReason", DbType="NChar(10)")]
		public string RejectReason
		{
			get
			{
				return this._RejectReason;
			}
			set
			{
				if ((this._RejectReason != value))
				{
					this.OnRejectReasonChanging(value);
					this.SendPropertyChanging();
					this._RejectReason = value;
					this.SendPropertyChanged("RejectReason");
					this.OnRejectReasonChanged();
				}
			}
		}
		
		[Column(Storage="_CheckUserName", DbType="NVarChar(50)")]
		public string CheckUserName
		{
			get
			{
				return this._CheckUserName;
			}
			set
			{
				if ((this._CheckUserName != value))
				{
					this.OnCheckUserNameChanging(value);
					this.SendPropertyChanging();
					this._CheckUserName = value;
					this.SendPropertyChanged("CheckUserName");
					this.OnCheckUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_CheckDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckDate
		{
			get
			{
				return this._CheckDate;
			}
			set
			{
				if ((this._CheckDate != value))
				{
					this.OnCheckDateChanging(value);
					this.SendPropertyChanging();
					this._CheckDate = value;
					this.SendPropertyChanged("CheckDate");
					this.OnCheckDateChanged();
				}
			}
		}
		
		[Association(Name="AssignBatch_Invoice", Storage="_Invoices", OtherKey="AssignBatchNo")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="Contract_AssignBatch", Storage="_Contract", ThisKey="ContractNo", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.AssignBatches.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.AssignBatches.Add(this);
						this._ContractNo = value.ContractNo;
					}
					else
					{
						this._ContractNo = default(string);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[Association(Name="Currency_AssignBatch", Storage="_Currency", ThisKey="BatchCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.AssignBatches.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.AssignBatches.Add(this);
						this._BatchCurrency = value.CurrencyCode;
					}
					else
					{
						this._BatchCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.AssignBatch = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.AssignBatch = null;
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Role;
		
		private string _Phone;
		
		private string _Telphone;
		
		private string _Email;
		
		private string _MSN;
		
		private System.Nullable<System.DateTime> _LoginDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTelphoneChanging(string value);
    partial void OnTelphoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMSNChanging(string value);
    partial void OnMSNChanged();
    partial void OnLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginDateChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Telphone", DbType="VarChar(50)")]
		public string Telphone
		{
			get
			{
				return this._Telphone;
			}
			set
			{
				if ((this._Telphone != value))
				{
					this.OnTelphoneChanging(value);
					this.SendPropertyChanging();
					this._Telphone = value;
					this.SendPropertyChanged("Telphone");
					this.OnTelphoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_MSN", DbType="VarChar(50)")]
		public string MSN
		{
			get
			{
				return this._MSN;
			}
			set
			{
				if ((this._MSN != value))
				{
					this.OnMSNChanging(value);
					this.SendPropertyChanging();
					this._MSN = value;
					this.SendPropertyChanged("MSN");
					this.OnMSNChanged();
				}
			}
		}
		
		[Column(Storage="_LoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BranchID;
		
		private string _BranchName;
		
		private EntitySet<Contract> _BuyerContracts;
		
		private EntitySet<Contract> _SellerContracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(string value);
    partial void OnBranchIDChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    #endregion
		
		public Branch()
		{
			this._BuyerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_BuyerContracts), new Action<Contract>(this.detach_BuyerContracts));
			this._SellerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_SellerContracts), new Action<Contract>(this.detach_SellerContracts));
			OnCreated();
		}
		
		[Column(Storage="_BranchID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_BranchName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[Association(Name="Branch_Contract", Storage="_BuyerContracts", OtherKey="BuyerBranchID")]
		public EntitySet<Contract> BuyerContracts
		{
			get
			{
				return this._BuyerContracts;
			}
			set
			{
				this._BuyerContracts.Assign(value);
			}
		}
		
		[Association(Name="Branch_Contract1", Storage="_SellerContracts", OtherKey="SellerBranchID")]
		public EntitySet<Contract> SellerContracts
		{
			get
			{
				return this._SellerContracts;
			}
			set
			{
				this._SellerContracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerBranch = this;
		}
		
		private void detach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerBranch = null;
		}
		
		private void attach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerBranch = this;
		}
		
		private void detach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerBranch = null;
		}
	}
	
	[Table(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EDINo;
		
		private string _ClientNameCN;
		
		private string _ClientNameEN_1;
		
		private string _ClientNameEN_2;
		
		private string _AddressCN;
		
		private string _AddressEN;
		
		private string _CityCN;
		
		private string _CityEN;
		
		private string _ProvinceCN;
		
		private string _ProvinceEN;
		
		private string _PostCode;
		
		private string _CountryCode;
		
		private string _ResponsibleAgency;
		
		private string _Wetsite;
		
		private string _ContactName;
		
		private string _Telephone;
		
		private string _Email;
		
		private string _FaxNumber;
		
		private string _CellPhone;
		
		private string _ClientType;
		
		private string _ProductCN;
		
		private string _ProductEN;
		
		private string _ClientLevel;
		
		private string _CompanyRegistrationNumber;
		
		private string _CompanyCode;
		
		private string _BranchID;
		
		private string _PMName;
		
		private string _Comment;
		
		private EntitySet<ClientAccount> _ClientAccounts;
		
		private EntitySet<ClientCreditLine> _ClientCreditLines;
		
		private EntitySet<Contract> _BuyerContracts;
		
		private EntitySet<Contract> _SellerContracts;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEDINoChanging(string value);
    partial void OnEDINoChanged();
    partial void OnClientNameCNChanging(string value);
    partial void OnClientNameCNChanged();
    partial void OnClientNameEN_1Changing(string value);
    partial void OnClientNameEN_1Changed();
    partial void OnClientNameEN_2Changing(string value);
    partial void OnClientNameEN_2Changed();
    partial void OnAddressCNChanging(string value);
    partial void OnAddressCNChanged();
    partial void OnAddressENChanging(string value);
    partial void OnAddressENChanged();
    partial void OnCityCNChanging(string value);
    partial void OnCityCNChanged();
    partial void OnCityENChanging(string value);
    partial void OnCityENChanged();
    partial void OnProvinceCNChanging(string value);
    partial void OnProvinceCNChanged();
    partial void OnProvinceENChanging(string value);
    partial void OnProvinceENChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnResponsibleAgencyChanging(string value);
    partial void OnResponsibleAgencyChanged();
    partial void OnWetsiteChanging(string value);
    partial void OnWetsiteChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnClientTypeChanging(string value);
    partial void OnClientTypeChanged();
    partial void OnProductCNChanging(string value);
    partial void OnProductCNChanged();
    partial void OnProductENChanging(string value);
    partial void OnProductENChanged();
    partial void OnClientLevelChanging(string value);
    partial void OnClientLevelChanged();
    partial void OnCompanyRegistrationNumberChanging(string value);
    partial void OnCompanyRegistrationNumberChanged();
    partial void OnCompanyCodeChanging(string value);
    partial void OnCompanyCodeChanged();
    partial void OnBranchIDChanging(string value);
    partial void OnBranchIDChanged();
    partial void OnPMNameChanging(string value);
    partial void OnPMNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Client()
		{
			this._ClientAccounts = new EntitySet<ClientAccount>(new Action<ClientAccount>(this.attach_ClientAccounts), new Action<ClientAccount>(this.detach_ClientAccounts));
			this._ClientCreditLines = new EntitySet<ClientCreditLine>(new Action<ClientCreditLine>(this.attach_ClientCreditLines), new Action<ClientCreditLine>(this.detach_ClientCreditLines));
			this._BuyerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_BuyerContracts), new Action<Contract>(this.detach_BuyerContracts));
			this._SellerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_SellerContracts), new Action<Contract>(this.detach_SellerContracts));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[Column(Storage="_EDINo", DbType="VarChar(35) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EDINo
		{
			get
			{
				return this._EDINo;
			}
			set
			{
				if ((this._EDINo != value))
				{
					this.OnEDINoChanging(value);
					this.SendPropertyChanging();
					this._EDINo = value;
					this.SendPropertyChanged("EDINo");
					this.OnEDINoChanged();
				}
			}
		}
		
		[Column(Storage="_ClientNameCN", DbType="NVarChar(100)")]
		public string ClientNameCN
		{
			get
			{
				return this._ClientNameCN;
			}
			set
			{
				if ((this._ClientNameCN != value))
				{
					this.OnClientNameCNChanging(value);
					this.SendPropertyChanging();
					this._ClientNameCN = value;
					this.SendPropertyChanged("ClientNameCN");
					this.OnClientNameCNChanged();
				}
			}
		}
		
		[Column(Storage="_ClientNameEN_1", DbType="NVarChar(100)")]
		public string ClientNameEN_1
		{
			get
			{
				return this._ClientNameEN_1;
			}
			set
			{
				if ((this._ClientNameEN_1 != value))
				{
					this.OnClientNameEN_1Changing(value);
					this.SendPropertyChanging();
					this._ClientNameEN_1 = value;
					this.SendPropertyChanged("ClientNameEN_1");
					this.OnClientNameEN_1Changed();
				}
			}
		}
		
		[Column(Storage="_ClientNameEN_2", DbType="NVarChar(100)")]
		public string ClientNameEN_2
		{
			get
			{
				return this._ClientNameEN_2;
			}
			set
			{
				if ((this._ClientNameEN_2 != value))
				{
					this.OnClientNameEN_2Changing(value);
					this.SendPropertyChanging();
					this._ClientNameEN_2 = value;
					this.SendPropertyChanged("ClientNameEN_2");
					this.OnClientNameEN_2Changed();
				}
			}
		}
		
		[Column(Storage="_AddressCN", DbType="NVarChar(200)")]
		public string AddressCN
		{
			get
			{
				return this._AddressCN;
			}
			set
			{
				if ((this._AddressCN != value))
				{
					this.OnAddressCNChanging(value);
					this.SendPropertyChanging();
					this._AddressCN = value;
					this.SendPropertyChanged("AddressCN");
					this.OnAddressCNChanged();
				}
			}
		}
		
		[Column(Storage="_AddressEN", DbType="NVarChar(200)")]
		public string AddressEN
		{
			get
			{
				return this._AddressEN;
			}
			set
			{
				if ((this._AddressEN != value))
				{
					this.OnAddressENChanging(value);
					this.SendPropertyChanging();
					this._AddressEN = value;
					this.SendPropertyChanged("AddressEN");
					this.OnAddressENChanged();
				}
			}
		}
		
		[Column(Storage="_CityCN", DbType="NVarChar(50)")]
		public string CityCN
		{
			get
			{
				return this._CityCN;
			}
			set
			{
				if ((this._CityCN != value))
				{
					this.OnCityCNChanging(value);
					this.SendPropertyChanging();
					this._CityCN = value;
					this.SendPropertyChanged("CityCN");
					this.OnCityCNChanged();
				}
			}
		}
		
		[Column(Storage="_CityEN", DbType="NVarChar(35)")]
		public string CityEN
		{
			get
			{
				return this._CityEN;
			}
			set
			{
				if ((this._CityEN != value))
				{
					this.OnCityENChanging(value);
					this.SendPropertyChanging();
					this._CityEN = value;
					this.SendPropertyChanged("CityEN");
					this.OnCityENChanged();
				}
			}
		}
		
		[Column(Storage="_ProvinceCN", DbType="NVarChar(50)")]
		public string ProvinceCN
		{
			get
			{
				return this._ProvinceCN;
			}
			set
			{
				if ((this._ProvinceCN != value))
				{
					this.OnProvinceCNChanging(value);
					this.SendPropertyChanging();
					this._ProvinceCN = value;
					this.SendPropertyChanged("ProvinceCN");
					this.OnProvinceCNChanged();
				}
			}
		}
		
		[Column(Storage="_ProvinceEN", DbType="NVarChar(50)")]
		public string ProvinceEN
		{
			get
			{
				return this._ProvinceEN;
			}
			set
			{
				if ((this._ProvinceEN != value))
				{
					this.OnProvinceENChanging(value);
					this.SendPropertyChanging();
					this._ProvinceEN = value;
					this.SendPropertyChanged("ProvinceEN");
					this.OnProvinceENChanged();
				}
			}
		}
		
		[Column(Storage="_PostCode", DbType="NVarChar(9)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(2)")]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ResponsibleAgency", DbType="NVarChar(50)")]
		public string ResponsibleAgency
		{
			get
			{
				return this._ResponsibleAgency;
			}
			set
			{
				if ((this._ResponsibleAgency != value))
				{
					this.OnResponsibleAgencyChanging(value);
					this.SendPropertyChanging();
					this._ResponsibleAgency = value;
					this.SendPropertyChanged("ResponsibleAgency");
					this.OnResponsibleAgencyChanged();
				}
			}
		}
		
		[Column(Storage="_Wetsite", DbType="NVarChar(200)")]
		public string Wetsite
		{
			get
			{
				return this._Wetsite;
			}
			set
			{
				if ((this._Wetsite != value))
				{
					this.OnWetsiteChanging(value);
					this.SendPropertyChanging();
					this._Wetsite = value;
					this.SendPropertyChanged("Wetsite");
					this.OnWetsiteChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="NVarChar(200)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="VarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FaxNumber", DbType="VarChar(50)")]
		public string FaxNumber
		{
			get
			{
				return this._FaxNumber;
			}
			set
			{
				if ((this._FaxNumber != value))
				{
					this.OnFaxNumberChanging(value);
					this.SendPropertyChanging();
					this._FaxNumber = value;
					this.SendPropertyChanged("FaxNumber");
					this.OnFaxNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CellPhone", DbType="VarChar(50)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_ClientType", DbType="NVarChar(50)")]
		public string ClientType
		{
			get
			{
				return this._ClientType;
			}
			set
			{
				if ((this._ClientType != value))
				{
					this.OnClientTypeChanging(value);
					this.SendPropertyChanging();
					this._ClientType = value;
					this.SendPropertyChanged("ClientType");
					this.OnClientTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCN", DbType="NVarChar(500)")]
		public string ProductCN
		{
			get
			{
				return this._ProductCN;
			}
			set
			{
				if ((this._ProductCN != value))
				{
					this.OnProductCNChanging(value);
					this.SendPropertyChanging();
					this._ProductCN = value;
					this.SendPropertyChanged("ProductCN");
					this.OnProductCNChanged();
				}
			}
		}
		
		[Column(Storage="_ProductEN", DbType="NVarChar(500)")]
		public string ProductEN
		{
			get
			{
				return this._ProductEN;
			}
			set
			{
				if ((this._ProductEN != value))
				{
					this.OnProductENChanging(value);
					this.SendPropertyChanging();
					this._ProductEN = value;
					this.SendPropertyChanged("ProductEN");
					this.OnProductENChanged();
				}
			}
		}
		
		[Column(Storage="_ClientLevel", DbType="NChar(10)")]
		public string ClientLevel
		{
			get
			{
				return this._ClientLevel;
			}
			set
			{
				if ((this._ClientLevel != value))
				{
					this.OnClientLevelChanging(value);
					this.SendPropertyChanging();
					this._ClientLevel = value;
					this.SendPropertyChanged("ClientLevel");
					this.OnClientLevelChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyRegistrationNumber", DbType="VarChar(35)")]
		public string CompanyRegistrationNumber
		{
			get
			{
				return this._CompanyRegistrationNumber;
			}
			set
			{
				if ((this._CompanyRegistrationNumber != value))
				{
					this.OnCompanyRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyRegistrationNumber = value;
					this.SendPropertyChanged("CompanyRegistrationNumber");
					this.OnCompanyRegistrationNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyCode", DbType="VarChar(50)")]
		public string CompanyCode
		{
			get
			{
				return this._CompanyCode;
			}
			set
			{
				if ((this._CompanyCode != value))
				{
					this.OnCompanyCodeChanging(value);
					this.SendPropertyChanging();
					this._CompanyCode = value;
					this.SendPropertyChanged("CompanyCode");
					this.OnCompanyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BranchID", DbType="NVarChar(50)")]
		public string BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_PMName", DbType="NVarChar(200)")]
		public string PMName
		{
			get
			{
				return this._PMName;
			}
			set
			{
				if ((this._PMName != value))
				{
					this.OnPMNameChanging(value);
					this.SendPropertyChanging();
					this._PMName = value;
					this.SendPropertyChanged("PMName");
					this.OnPMNameChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientAccount", Storage="_ClientAccounts", OtherKey="EDINo")]
		public EntitySet<ClientAccount> ClientAccounts
		{
			get
			{
				return this._ClientAccounts;
			}
			set
			{
				this._ClientAccounts.Assign(value);
			}
		}
		
		[Association(Name="Client_ClientCreditLine", Storage="_ClientCreditLines", OtherKey="EDINo")]
		public EntitySet<ClientCreditLine> ClientCreditLines
		{
			get
			{
				return this._ClientCreditLines;
			}
			set
			{
				this._ClientCreditLines.Assign(value);
			}
		}
		
		[Association(Name="Client_Contract", Storage="_BuyerContracts", OtherKey="BuyerNo")]
		public EntitySet<Contract> BuyerContracts
		{
			get
			{
				return this._BuyerContracts;
			}
			set
			{
				this._BuyerContracts.Assign(value);
			}
		}
		
		[Association(Name="Client_Contract1", Storage="_SellerContracts", OtherKey="SellerNo")]
		public EntitySet<Contract> SellerContracts
		{
			get
			{
				return this._SellerContracts;
			}
			set
			{
				this._SellerContracts.Assign(value);
			}
		}
		
		[Association(Name="Country_Client", Storage="_Country", ThisKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientAccounts(ClientAccount entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientAccounts(ClientAccount entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_ClientCreditLines(ClientCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientCreditLines(ClientCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerClient = this;
		}
		
		private void detach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerClient = null;
		}
		
		private void attach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerClient = this;
		}
		
		private void detach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerClient = null;
		}
	}
	
	[Table(Name="dbo.ClientAccount")]
	public partial class ClientAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountID;
		
		private string _EDINo;
		
		private string _AccountNo;
		
		private string _AccountCurrency;
		
		private string _AccountType;
		
		private string _Bank;
		
		private string _Branch;
		
		private string _IsDefault;
		
		private string _Comment;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnEDINoChanging(string value);
    partial void OnEDINoChanged();
    partial void OnAccountNoChanging(string value);
    partial void OnAccountNoChanged();
    partial void OnAccountCurrencyChanging(string value);
    partial void OnAccountCurrencyChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnBankChanging(string value);
    partial void OnBankChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    partial void OnIsDefaultChanging(string value);
    partial void OnIsDefaultChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public ClientAccount()
		{
			this._Client = default(EntityRef<Client>);
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[Column(Storage="_AccountID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_EDINo", DbType="VarChar(35)")]
		public string EDINo
		{
			get
			{
				return this._EDINo;
			}
			set
			{
				if ((this._EDINo != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEDINoChanging(value);
					this.SendPropertyChanging();
					this._EDINo = value;
					this.SendPropertyChanged("EDINo");
					this.OnEDINoChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNo", DbType="VarChar(200)")]
		public string AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[Column(Storage="_AccountCurrency", DbType="NChar(3)")]
		public string AccountCurrency
		{
			get
			{
				return this._AccountCurrency;
			}
			set
			{
				if ((this._AccountCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountCurrencyChanging(value);
					this.SendPropertyChanging();
					this._AccountCurrency = value;
					this.SendPropertyChanged("AccountCurrency");
					this.OnAccountCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountType", DbType="NVarChar(50)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Bank", DbType="VarChar(200)")]
		public string Bank
		{
			get
			{
				return this._Bank;
			}
			set
			{
				if ((this._Bank != value))
				{
					this.OnBankChanging(value);
					this.SendPropertyChanging();
					this._Bank = value;
					this.SendPropertyChanged("Bank");
					this.OnBankChanged();
				}
			}
		}
		
		[Column(Storage="_Branch", DbType="VarChar(200)")]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="VarChar(5)")]
		public string IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientAccount", Storage="_Client", ThisKey="EDINo", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientAccounts.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientAccounts.Add(this);
						this._EDINo = value.EDINo;
					}
					else
					{
						this._EDINo = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="Currency_ClientAccount", Storage="_Currency", ThisKey="AccountCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.ClientAccounts.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.ClientAccounts.Add(this);
						this._AccountCurrency = value.CurrencyCode;
					}
					else
					{
						this._AccountCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ClientCreditLine")]
	public partial class ClientCreditLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CreditLineID;
		
		private string _EDINo;
		
		private string _CreditLineType;
		
		private string _CreditLineCurrency;
		
		private System.Nullable<double> _CreditLineLimit;
		
		private System.Nullable<System.DateTime> _PeriodBegin;
		
		private System.Nullable<System.DateTime> _PeriodEnd;
		
		private string _AuthorizationNo;
		
		private string _Comment;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreditLineIDChanging(string value);
    partial void OnCreditLineIDChanged();
    partial void OnEDINoChanging(string value);
    partial void OnEDINoChanged();
    partial void OnCreditLineTypeChanging(string value);
    partial void OnCreditLineTypeChanged();
    partial void OnCreditLineCurrencyChanging(string value);
    partial void OnCreditLineCurrencyChanged();
    partial void OnCreditLineLimitChanging(System.Nullable<double> value);
    partial void OnCreditLineLimitChanged();
    partial void OnPeriodBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodBeginChanged();
    partial void OnPeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodEndChanged();
    partial void OnAuthorizationNoChanging(string value);
    partial void OnAuthorizationNoChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public ClientCreditLine()
		{
			this._Client = default(EntityRef<Client>);
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[Column(Storage="_CreditLineID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CreditLineID
		{
			get
			{
				return this._CreditLineID;
			}
			set
			{
				if ((this._CreditLineID != value))
				{
					this.OnCreditLineIDChanging(value);
					this.SendPropertyChanging();
					this._CreditLineID = value;
					this.SendPropertyChanged("CreditLineID");
					this.OnCreditLineIDChanged();
				}
			}
		}
		
		[Column(Storage="_EDINo", DbType="VarChar(35)")]
		public string EDINo
		{
			get
			{
				return this._EDINo;
			}
			set
			{
				if ((this._EDINo != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEDINoChanging(value);
					this.SendPropertyChanging();
					this._EDINo = value;
					this.SendPropertyChanged("EDINo");
					this.OnEDINoChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineType", DbType="NVarChar(50)")]
		public string CreditLineType
		{
			get
			{
				return this._CreditLineType;
			}
			set
			{
				if ((this._CreditLineType != value))
				{
					this.OnCreditLineTypeChanging(value);
					this.SendPropertyChanging();
					this._CreditLineType = value;
					this.SendPropertyChanged("CreditLineType");
					this.OnCreditLineTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineCurrency", DbType="NChar(3)")]
		public string CreditLineCurrency
		{
			get
			{
				return this._CreditLineCurrency;
			}
			set
			{
				if ((this._CreditLineCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreditLineCurrencyChanging(value);
					this.SendPropertyChanging();
					this._CreditLineCurrency = value;
					this.SendPropertyChanged("CreditLineCurrency");
					this.OnCreditLineCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineLimit", DbType="Float")]
		public System.Nullable<double> CreditLineLimit
		{
			get
			{
				return this._CreditLineLimit;
			}
			set
			{
				if ((this._CreditLineLimit != value))
				{
					this.OnCreditLineLimitChanging(value);
					this.SendPropertyChanging();
					this._CreditLineLimit = value;
					this.SendPropertyChanged("CreditLineLimit");
					this.OnCreditLineLimitChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodBegin
		{
			get
			{
				return this._PeriodBegin;
			}
			set
			{
				if ((this._PeriodBegin != value))
				{
					this.OnPeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._PeriodBegin = value;
					this.SendPropertyChanged("PeriodBegin");
					this.OnPeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodEnd
		{
			get
			{
				return this._PeriodEnd;
			}
			set
			{
				if ((this._PeriodEnd != value))
				{
					this.OnPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._PeriodEnd = value;
					this.SendPropertyChanged("PeriodEnd");
					this.OnPeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationNo", DbType="NVarChar(50)")]
		public string AuthorizationNo
		{
			get
			{
				return this._AuthorizationNo;
			}
			set
			{
				if ((this._AuthorizationNo != value))
				{
					this.OnAuthorizationNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationNo = value;
					this.SendPropertyChanged("AuthorizationNo");
					this.OnAuthorizationNoChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Client_ClientCreditLine", Storage="_Client", ThisKey="EDINo", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientCreditLines.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientCreditLines.Add(this);
						this._EDINo = value.EDINo;
					}
					else
					{
						this._EDINo = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="Currency_ClientCreditLine", Storage="_Currency", ThisKey="CreditLineCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.ClientCreditLines.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.ClientCreditLines.Add(this);
						this._CreditLineCurrency = value.CurrencyCode;
					}
					else
					{
						this._CreditLineCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ContractNo;
		
		private string _SellerNo;
		
		private string _SellerFactorNo;
		
		private string _SellerBranchID;
		
		private string _BuyerNo;
		
		private string _BuyerFactorNo;
		
		private string _BuyerBranchID;
		
		private string _InvoiceCurrency;
		
		private string _BizType;
		
		private string _IsRecoarse;
		
		private string _IsNotice;
		
		private string _AssignType;
		
		private string _CreditCoverCurr;
		
		private System.Nullable<double> _CreditCover;
		
		private string _IsCreditCoverRevolving;
		
		private string _AuthorizationNo;
		
		private System.Nullable<double> _PUGProportion;
		
		private System.Nullable<System.DateTime> _CreditCoverPeriodBegin;
		
		private System.Nullable<System.DateTime> _CreditCoverPeriodEnd;
		
		private System.Nullable<int> _PUGPeriod;
		
		private System.Nullable<int> _ReassignGracePeriod;
		
		private string _FinanceLineCurr;
		
		private System.Nullable<double> _FinanceLine;
		
		private System.Nullable<System.DateTime> _FinanceLinePeriodBegin;
		
		private System.Nullable<System.DateTime> _FinanceLinePeriodEnd;
		
		private System.Nullable<double> _FinanceProportion;
		
		private string _OrderNumber;
		
		private string _PaymentTerms;
		
		private System.Nullable<int> _FinanceGracePeriod;
		
		private System.Nullable<double> _Deductibles;
		
		private System.Nullable<double> _LossThreshold;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<double> _EFPrice;
		
		private System.Nullable<double> _IFPrice;
		
		private string _CommissonType;
		
		private string _CommissionTypeComment;
		
		private string _HandFeeCurr;
		
		private System.Nullable<double> _HandFee;
		
		private System.Nullable<System.DateTime> _ContractValueDay;
		
		private System.Nullable<System.DateTime> _ContractDueDay;
		
		private string _ContractStatus;
		
		private string _NoticeType;
		
		private string _NoticePerson;
		
		private string _Email;
		
		private string _Fax;
		
		private string _Comment;
		
		private string _CreateUserName;
		
		private EntitySet<AssignBatch> _AssignBatches;
		
		private EntitySet<FinanceBatch> _FinanceBatches;
		
		private EntitySet<PaymentBatch> _PaymentBatches;
		
		private EntityRef<Branch> _BuyerBranch;
		
		private EntityRef<Client> _BuyerClient;
		
		private EntityRef<Branch> _SellerBranch;
		
		private EntityRef<Client> _SellerClient;
		
		private EntityRef<Currency> _CreditCoverCurrency;
		
		private EntityRef<Currency> _FinanceLineCurrency;
		
		private EntityRef<Currency> _HandFeeCurrency;
		
		private EntityRef<Factor> _BuyerFactor;
		
		private EntityRef<Factor> _SellerFactor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnSellerNoChanging(string value);
    partial void OnSellerNoChanged();
    partial void OnSellerFactorNoChanging(string value);
    partial void OnSellerFactorNoChanged();
    partial void OnSellerBranchIDChanging(string value);
    partial void OnSellerBranchIDChanged();
    partial void OnBuyerNoChanging(string value);
    partial void OnBuyerNoChanged();
    partial void OnBuyerFactorNoChanging(string value);
    partial void OnBuyerFactorNoChanged();
    partial void OnBuyerBranchIDChanging(string value);
    partial void OnBuyerBranchIDChanged();
    partial void OnInvoiceCurrencyChanging(string value);
    partial void OnInvoiceCurrencyChanged();
    partial void OnBizTypeChanging(string value);
    partial void OnBizTypeChanged();
    partial void OnIsRecoarseChanging(string value);
    partial void OnIsRecoarseChanged();
    partial void OnIsNoticeChanging(string value);
    partial void OnIsNoticeChanged();
    partial void OnAssignTypeChanging(string value);
    partial void OnAssignTypeChanged();
    partial void OnCreditCoverCurrChanging(string value);
    partial void OnCreditCoverCurrChanged();
    partial void OnCreditCoverChanging(System.Nullable<double> value);
    partial void OnCreditCoverChanged();
    partial void OnIsCreditCoverRevolvingChanging(string value);
    partial void OnIsCreditCoverRevolvingChanged();
    partial void OnAuthorizationNoChanging(string value);
    partial void OnAuthorizationNoChanged();
    partial void OnPUGProportionChanging(System.Nullable<double> value);
    partial void OnPUGProportionChanged();
    partial void OnCreditCoverPeriodBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnCreditCoverPeriodBeginChanged();
    partial void OnCreditCoverPeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnCreditCoverPeriodEndChanged();
    partial void OnPUGPeriodChanging(System.Nullable<int> value);
    partial void OnPUGPeriodChanged();
    partial void OnReassignGracePeriodChanging(System.Nullable<int> value);
    partial void OnReassignGracePeriodChanged();
    partial void OnFinanceLineCurrChanging(string value);
    partial void OnFinanceLineCurrChanged();
    partial void OnFinanceLineChanging(System.Nullable<double> value);
    partial void OnFinanceLineChanged();
    partial void OnFinanceLinePeriodBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnFinanceLinePeriodBeginChanged();
    partial void OnFinanceLinePeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnFinanceLinePeriodEndChanged();
    partial void OnFinanceProportionChanging(System.Nullable<double> value);
    partial void OnFinanceProportionChanged();
    partial void OnOrderNumberChanging(string value);
    partial void OnOrderNumberChanged();
    partial void OnPaymentTermsChanging(string value);
    partial void OnPaymentTermsChanged();
    partial void OnFinanceGracePeriodChanging(System.Nullable<int> value);
    partial void OnFinanceGracePeriodChanged();
    partial void OnDeductiblesChanging(System.Nullable<double> value);
    partial void OnDeductiblesChanged();
    partial void OnLossThresholdChanging(System.Nullable<double> value);
    partial void OnLossThresholdChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnEFPriceChanging(System.Nullable<double> value);
    partial void OnEFPriceChanged();
    partial void OnIFPriceChanging(System.Nullable<double> value);
    partial void OnIFPriceChanged();
    partial void OnCommissonTypeChanging(string value);
    partial void OnCommissonTypeChanged();
    partial void OnCommissionTypeCommentChanging(string value);
    partial void OnCommissionTypeCommentChanged();
    partial void OnHandFeeCurrChanging(string value);
    partial void OnHandFeeCurrChanged();
    partial void OnHandFeeChanging(System.Nullable<double> value);
    partial void OnHandFeeChanged();
    partial void OnContractValueDayChanging(System.Nullable<System.DateTime> value);
    partial void OnContractValueDayChanged();
    partial void OnContractDueDayChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDueDayChanged();
    partial void OnContractStatusChanging(string value);
    partial void OnContractStatusChanged();
    partial void OnNoticeTypeChanging(string value);
    partial void OnNoticeTypeChanged();
    partial void OnNoticePersonChanging(string value);
    partial void OnNoticePersonChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreateUserNameChanging(string value);
    partial void OnCreateUserNameChanged();
    #endregion
		
		public Contract()
		{
			this._AssignBatches = new EntitySet<AssignBatch>(new Action<AssignBatch>(this.attach_AssignBatches), new Action<AssignBatch>(this.detach_AssignBatches));
			this._FinanceBatches = new EntitySet<FinanceBatch>(new Action<FinanceBatch>(this.attach_FinanceBatches), new Action<FinanceBatch>(this.detach_FinanceBatches));
			this._PaymentBatches = new EntitySet<PaymentBatch>(new Action<PaymentBatch>(this.attach_PaymentBatches), new Action<PaymentBatch>(this.detach_PaymentBatches));
			this._BuyerBranch = default(EntityRef<Branch>);
			this._BuyerClient = default(EntityRef<Client>);
			this._SellerBranch = default(EntityRef<Branch>);
			this._SellerClient = default(EntityRef<Client>);
			this._CreditCoverCurrency = default(EntityRef<Currency>);
			this._FinanceLineCurrency = default(EntityRef<Currency>);
			this._HandFeeCurrency = default(EntityRef<Currency>);
			this._BuyerFactor = default(EntityRef<Factor>);
			this._SellerFactor = default(EntityRef<Factor>);
			OnCreated();
		}
		
		[Column(Storage="_ContractNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[Column(Storage="_SellerNo", DbType="VarChar(35)")]
		public string SellerNo
		{
			get
			{
				return this._SellerNo;
			}
			set
			{
				if ((this._SellerNo != value))
				{
					if (this._SellerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerNoChanging(value);
					this.SendPropertyChanging();
					this._SellerNo = value;
					this.SendPropertyChanged("SellerNo");
					this.OnSellerNoChanged();
				}
			}
		}
		
		[Column(Storage="_SellerFactorNo", DbType="Char(7)")]
		public string SellerFactorNo
		{
			get
			{
				return this._SellerFactorNo;
			}
			set
			{
				if ((this._SellerFactorNo != value))
				{
					if (this._SellerFactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerFactorNoChanging(value);
					this.SendPropertyChanging();
					this._SellerFactorNo = value;
					this.SendPropertyChanged("SellerFactorNo");
					this.OnSellerFactorNoChanged();
				}
			}
		}
		
		[Column(Storage="_SellerBranchID", DbType="NVarChar(50)")]
		public string SellerBranchID
		{
			get
			{
				return this._SellerBranchID;
			}
			set
			{
				if ((this._SellerBranchID != value))
				{
					if (this._SellerBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerBranchIDChanging(value);
					this.SendPropertyChanging();
					this._SellerBranchID = value;
					this.SendPropertyChanged("SellerBranchID");
					this.OnSellerBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_BuyerNo", DbType="VarChar(35)")]
		public string BuyerNo
		{
			get
			{
				return this._BuyerNo;
			}
			set
			{
				if ((this._BuyerNo != value))
				{
					if (this._BuyerClient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerNoChanging(value);
					this.SendPropertyChanging();
					this._BuyerNo = value;
					this.SendPropertyChanged("BuyerNo");
					this.OnBuyerNoChanged();
				}
			}
		}
		
		[Column(Storage="_BuyerFactorNo", DbType="Char(7)")]
		public string BuyerFactorNo
		{
			get
			{
				return this._BuyerFactorNo;
			}
			set
			{
				if ((this._BuyerFactorNo != value))
				{
					if (this._BuyerFactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerFactorNoChanging(value);
					this.SendPropertyChanging();
					this._BuyerFactorNo = value;
					this.SendPropertyChanged("BuyerFactorNo");
					this.OnBuyerFactorNoChanged();
				}
			}
		}
		
		[Column(Storage="_BuyerBranchID", DbType="NVarChar(50)")]
		public string BuyerBranchID
		{
			get
			{
				return this._BuyerBranchID;
			}
			set
			{
				if ((this._BuyerBranchID != value))
				{
					if (this._BuyerBranch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BuyerBranchID = value;
					this.SendPropertyChanged("BuyerBranchID");
					this.OnBuyerBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceCurrency", DbType="NChar(10)")]
		public string InvoiceCurrency
		{
			get
			{
				return this._InvoiceCurrency;
			}
			set
			{
				if ((this._InvoiceCurrency != value))
				{
					this.OnInvoiceCurrencyChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCurrency = value;
					this.SendPropertyChanged("InvoiceCurrency");
					this.OnInvoiceCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_BizType", DbType="NVarChar(50)")]
		public string BizType
		{
			get
			{
				return this._BizType;
			}
			set
			{
				if ((this._BizType != value))
				{
					this.OnBizTypeChanging(value);
					this.SendPropertyChanging();
					this._BizType = value;
					this.SendPropertyChanged("BizType");
					this.OnBizTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsRecoarse", DbType="NChar(10)")]
		public string IsRecoarse
		{
			get
			{
				return this._IsRecoarse;
			}
			set
			{
				if ((this._IsRecoarse != value))
				{
					this.OnIsRecoarseChanging(value);
					this.SendPropertyChanging();
					this._IsRecoarse = value;
					this.SendPropertyChanged("IsRecoarse");
					this.OnIsRecoarseChanged();
				}
			}
		}
		
		[Column(Storage="_IsNotice", DbType="NChar(10)")]
		public string IsNotice
		{
			get
			{
				return this._IsNotice;
			}
			set
			{
				if ((this._IsNotice != value))
				{
					this.OnIsNoticeChanging(value);
					this.SendPropertyChanging();
					this._IsNotice = value;
					this.SendPropertyChanged("IsNotice");
					this.OnIsNoticeChanged();
				}
			}
		}
		
		[Column(Storage="_AssignType", DbType="NChar(10)")]
		public string AssignType
		{
			get
			{
				return this._AssignType;
			}
			set
			{
				if ((this._AssignType != value))
				{
					this.OnAssignTypeChanging(value);
					this.SendPropertyChanging();
					this._AssignType = value;
					this.SendPropertyChanged("AssignType");
					this.OnAssignTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCoverCurr", DbType="NChar(3)")]
		public string CreditCoverCurr
		{
			get
			{
				return this._CreditCoverCurr;
			}
			set
			{
				if ((this._CreditCoverCurr != value))
				{
					if (this._CreditCoverCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreditCoverCurrChanging(value);
					this.SendPropertyChanging();
					this._CreditCoverCurr = value;
					this.SendPropertyChanged("CreditCoverCurr");
					this.OnCreditCoverCurrChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCover", DbType="Float")]
		public System.Nullable<double> CreditCover
		{
			get
			{
				return this._CreditCover;
			}
			set
			{
				if ((this._CreditCover != value))
				{
					this.OnCreditCoverChanging(value);
					this.SendPropertyChanging();
					this._CreditCover = value;
					this.SendPropertyChanged("CreditCover");
					this.OnCreditCoverChanged();
				}
			}
		}
		
		[Column(Storage="_IsCreditCoverRevolving", DbType="NChar(10)")]
		public string IsCreditCoverRevolving
		{
			get
			{
				return this._IsCreditCoverRevolving;
			}
			set
			{
				if ((this._IsCreditCoverRevolving != value))
				{
					this.OnIsCreditCoverRevolvingChanging(value);
					this.SendPropertyChanging();
					this._IsCreditCoverRevolving = value;
					this.SendPropertyChanged("IsCreditCoverRevolving");
					this.OnIsCreditCoverRevolvingChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationNo", DbType="NChar(10)")]
		public string AuthorizationNo
		{
			get
			{
				return this._AuthorizationNo;
			}
			set
			{
				if ((this._AuthorizationNo != value))
				{
					this.OnAuthorizationNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationNo = value;
					this.SendPropertyChanged("AuthorizationNo");
					this.OnAuthorizationNoChanged();
				}
			}
		}
		
		[Column(Storage="_PUGProportion", DbType="Float")]
		public System.Nullable<double> PUGProportion
		{
			get
			{
				return this._PUGProportion;
			}
			set
			{
				if ((this._PUGProportion != value))
				{
					this.OnPUGProportionChanging(value);
					this.SendPropertyChanging();
					this._PUGProportion = value;
					this.SendPropertyChanged("PUGProportion");
					this.OnPUGProportionChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCoverPeriodBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreditCoverPeriodBegin
		{
			get
			{
				return this._CreditCoverPeriodBegin;
			}
			set
			{
				if ((this._CreditCoverPeriodBegin != value))
				{
					this.OnCreditCoverPeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._CreditCoverPeriodBegin = value;
					this.SendPropertyChanged("CreditCoverPeriodBegin");
					this.OnCreditCoverPeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCoverPeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreditCoverPeriodEnd
		{
			get
			{
				return this._CreditCoverPeriodEnd;
			}
			set
			{
				if ((this._CreditCoverPeriodEnd != value))
				{
					this.OnCreditCoverPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._CreditCoverPeriodEnd = value;
					this.SendPropertyChanged("CreditCoverPeriodEnd");
					this.OnCreditCoverPeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_PUGPeriod", DbType="Int")]
		public System.Nullable<int> PUGPeriod
		{
			get
			{
				return this._PUGPeriod;
			}
			set
			{
				if ((this._PUGPeriod != value))
				{
					this.OnPUGPeriodChanging(value);
					this.SendPropertyChanging();
					this._PUGPeriod = value;
					this.SendPropertyChanged("PUGPeriod");
					this.OnPUGPeriodChanged();
				}
			}
		}
		
		[Column(Storage="_ReassignGracePeriod", DbType="Int")]
		public System.Nullable<int> ReassignGracePeriod
		{
			get
			{
				return this._ReassignGracePeriod;
			}
			set
			{
				if ((this._ReassignGracePeriod != value))
				{
					this.OnReassignGracePeriodChanging(value);
					this.SendPropertyChanging();
					this._ReassignGracePeriod = value;
					this.SendPropertyChanged("ReassignGracePeriod");
					this.OnReassignGracePeriodChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceLineCurr", DbType="NChar(3)")]
		public string FinanceLineCurr
		{
			get
			{
				return this._FinanceLineCurr;
			}
			set
			{
				if ((this._FinanceLineCurr != value))
				{
					if (this._FinanceLineCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinanceLineCurrChanging(value);
					this.SendPropertyChanging();
					this._FinanceLineCurr = value;
					this.SendPropertyChanged("FinanceLineCurr");
					this.OnFinanceLineCurrChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceLine", DbType="Float")]
		public System.Nullable<double> FinanceLine
		{
			get
			{
				return this._FinanceLine;
			}
			set
			{
				if ((this._FinanceLine != value))
				{
					this.OnFinanceLineChanging(value);
					this.SendPropertyChanging();
					this._FinanceLine = value;
					this.SendPropertyChanged("FinanceLine");
					this.OnFinanceLineChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceLinePeriodBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinanceLinePeriodBegin
		{
			get
			{
				return this._FinanceLinePeriodBegin;
			}
			set
			{
				if ((this._FinanceLinePeriodBegin != value))
				{
					this.OnFinanceLinePeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._FinanceLinePeriodBegin = value;
					this.SendPropertyChanged("FinanceLinePeriodBegin");
					this.OnFinanceLinePeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceLinePeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinanceLinePeriodEnd
		{
			get
			{
				return this._FinanceLinePeriodEnd;
			}
			set
			{
				if ((this._FinanceLinePeriodEnd != value))
				{
					this.OnFinanceLinePeriodEndChanging(value);
					this.SendPropertyChanging();
					this._FinanceLinePeriodEnd = value;
					this.SendPropertyChanged("FinanceLinePeriodEnd");
					this.OnFinanceLinePeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceProportion", DbType="Float")]
		public System.Nullable<double> FinanceProportion
		{
			get
			{
				return this._FinanceProportion;
			}
			set
			{
				if ((this._FinanceProportion != value))
				{
					this.OnFinanceProportionChanging(value);
					this.SendPropertyChanging();
					this._FinanceProportion = value;
					this.SendPropertyChanged("FinanceProportion");
					this.OnFinanceProportionChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNumber", DbType="NChar(10)")]
		public string OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentTerms", DbType="NVarChar(500)")]
		public string PaymentTerms
		{
			get
			{
				return this._PaymentTerms;
			}
			set
			{
				if ((this._PaymentTerms != value))
				{
					this.OnPaymentTermsChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerms = value;
					this.SendPropertyChanged("PaymentTerms");
					this.OnPaymentTermsChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceGracePeriod", DbType="Int")]
		public System.Nullable<int> FinanceGracePeriod
		{
			get
			{
				return this._FinanceGracePeriod;
			}
			set
			{
				if ((this._FinanceGracePeriod != value))
				{
					this.OnFinanceGracePeriodChanging(value);
					this.SendPropertyChanging();
					this._FinanceGracePeriod = value;
					this.SendPropertyChanged("FinanceGracePeriod");
					this.OnFinanceGracePeriodChanged();
				}
			}
		}
		
		[Column(Storage="_Deductibles", DbType="Float")]
		public System.Nullable<double> Deductibles
		{
			get
			{
				return this._Deductibles;
			}
			set
			{
				if ((this._Deductibles != value))
				{
					this.OnDeductiblesChanging(value);
					this.SendPropertyChanging();
					this._Deductibles = value;
					this.SendPropertyChanged("Deductibles");
					this.OnDeductiblesChanged();
				}
			}
		}
		
		[Column(Storage="_LossThreshold", DbType="Float")]
		public System.Nullable<double> LossThreshold
		{
			get
			{
				return this._LossThreshold;
			}
			set
			{
				if ((this._LossThreshold != value))
				{
					this.OnLossThresholdChanging(value);
					this.SendPropertyChanging();
					this._LossThreshold = value;
					this.SendPropertyChanged("LossThreshold");
					this.OnLossThresholdChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_EFPrice", DbType="Float")]
		public System.Nullable<double> EFPrice
		{
			get
			{
				return this._EFPrice;
			}
			set
			{
				if ((this._EFPrice != value))
				{
					this.OnEFPriceChanging(value);
					this.SendPropertyChanging();
					this._EFPrice = value;
					this.SendPropertyChanged("EFPrice");
					this.OnEFPriceChanged();
				}
			}
		}
		
		[Column(Storage="_IFPrice", DbType="Float")]
		public System.Nullable<double> IFPrice
		{
			get
			{
				return this._IFPrice;
			}
			set
			{
				if ((this._IFPrice != value))
				{
					this.OnIFPriceChanging(value);
					this.SendPropertyChanging();
					this._IFPrice = value;
					this.SendPropertyChanged("IFPrice");
					this.OnIFPriceChanged();
				}
			}
		}
		
		[Column(Storage="_CommissonType", DbType="NChar(10)")]
		public string CommissonType
		{
			get
			{
				return this._CommissonType;
			}
			set
			{
				if ((this._CommissonType != value))
				{
					this.OnCommissonTypeChanging(value);
					this.SendPropertyChanging();
					this._CommissonType = value;
					this.SendPropertyChanged("CommissonType");
					this.OnCommissonTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CommissionTypeComment", DbType="NChar(10)")]
		public string CommissionTypeComment
		{
			get
			{
				return this._CommissionTypeComment;
			}
			set
			{
				if ((this._CommissionTypeComment != value))
				{
					this.OnCommissionTypeCommentChanging(value);
					this.SendPropertyChanging();
					this._CommissionTypeComment = value;
					this.SendPropertyChanged("CommissionTypeComment");
					this.OnCommissionTypeCommentChanged();
				}
			}
		}
		
		[Column(Storage="_HandFeeCurr", DbType="NChar(3)")]
		public string HandFeeCurr
		{
			get
			{
				return this._HandFeeCurr;
			}
			set
			{
				if ((this._HandFeeCurr != value))
				{
					if (this._HandFeeCurrency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHandFeeCurrChanging(value);
					this.SendPropertyChanging();
					this._HandFeeCurr = value;
					this.SendPropertyChanged("HandFeeCurr");
					this.OnHandFeeCurrChanged();
				}
			}
		}
		
		[Column(Storage="_HandFee", DbType="Float")]
		public System.Nullable<double> HandFee
		{
			get
			{
				return this._HandFee;
			}
			set
			{
				if ((this._HandFee != value))
				{
					this.OnHandFeeChanging(value);
					this.SendPropertyChanging();
					this._HandFee = value;
					this.SendPropertyChanged("HandFee");
					this.OnHandFeeChanged();
				}
			}
		}
		
		[Column(Storage="_ContractValueDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractValueDay
		{
			get
			{
				return this._ContractValueDay;
			}
			set
			{
				if ((this._ContractValueDay != value))
				{
					this.OnContractValueDayChanging(value);
					this.SendPropertyChanging();
					this._ContractValueDay = value;
					this.SendPropertyChanged("ContractValueDay");
					this.OnContractValueDayChanged();
				}
			}
		}
		
		[Column(Storage="_ContractDueDay", DbType="DateTime")]
		public System.Nullable<System.DateTime> ContractDueDay
		{
			get
			{
				return this._ContractDueDay;
			}
			set
			{
				if ((this._ContractDueDay != value))
				{
					this.OnContractDueDayChanging(value);
					this.SendPropertyChanging();
					this._ContractDueDay = value;
					this.SendPropertyChanged("ContractDueDay");
					this.OnContractDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_ContractStatus", DbType="NVarChar(50)")]
		public string ContractStatus
		{
			get
			{
				return this._ContractStatus;
			}
			set
			{
				if ((this._ContractStatus != value))
				{
					this.OnContractStatusChanging(value);
					this.SendPropertyChanging();
					this._ContractStatus = value;
					this.SendPropertyChanged("ContractStatus");
					this.OnContractStatusChanged();
				}
			}
		}
		
		[Column(Storage="_NoticeType", DbType="NVarChar(50)")]
		public string NoticeType
		{
			get
			{
				return this._NoticeType;
			}
			set
			{
				if ((this._NoticeType != value))
				{
					this.OnNoticeTypeChanging(value);
					this.SendPropertyChanging();
					this._NoticeType = value;
					this.SendPropertyChanged("NoticeType");
					this.OnNoticeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_NoticePerson", DbType="NVarChar(50)")]
		public string NoticePerson
		{
			get
			{
				return this._NoticePerson;
			}
			set
			{
				if ((this._NoticePerson != value))
				{
					this.OnNoticePersonChanging(value);
					this.SendPropertyChanging();
					this._NoticePerson = value;
					this.SendPropertyChanged("NoticePerson");
					this.OnNoticePersonChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserName", DbType="NVarChar(50)")]
		public string CreateUserName
		{
			get
			{
				return this._CreateUserName;
			}
			set
			{
				if ((this._CreateUserName != value))
				{
					this.OnCreateUserNameChanging(value);
					this.SendPropertyChanging();
					this._CreateUserName = value;
					this.SendPropertyChanged("CreateUserName");
					this.OnCreateUserNameChanged();
				}
			}
		}
		
		[Association(Name="Contract_AssignBatch", Storage="_AssignBatches", OtherKey="ContractNo")]
		public EntitySet<AssignBatch> AssignBatches
		{
			get
			{
				return this._AssignBatches;
			}
			set
			{
				this._AssignBatches.Assign(value);
			}
		}
		
		[Association(Name="Contract_FinanceBatch", Storage="_FinanceBatches", OtherKey="ContractNo")]
		public EntitySet<FinanceBatch> FinanceBatches
		{
			get
			{
				return this._FinanceBatches;
			}
			set
			{
				this._FinanceBatches.Assign(value);
			}
		}
		
		[Association(Name="Contract_PaymentBatch", Storage="_PaymentBatches", OtherKey="ContractNo")]
		public EntitySet<PaymentBatch> PaymentBatches
		{
			get
			{
				return this._PaymentBatches;
			}
			set
			{
				this._PaymentBatches.Assign(value);
			}
		}
		
		[Association(Name="Branch_Contract", Storage="_BuyerBranch", ThisKey="BuyerBranchID", IsForeignKey=true)]
		public Branch BuyerBranch
		{
			get
			{
				return this._BuyerBranch.Entity;
			}
			set
			{
				Branch previousValue = this._BuyerBranch.Entity;
				if (((previousValue != value) 
							|| (this._BuyerBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyerBranch.Entity = null;
						previousValue.BuyerContracts.Remove(this);
					}
					this._BuyerBranch.Entity = value;
					if ((value != null))
					{
						value.BuyerContracts.Add(this);
						this._BuyerBranchID = value.BranchID;
					}
					else
					{
						this._BuyerBranchID = default(string);
					}
					this.SendPropertyChanged("BuyerBranch");
				}
			}
		}
		
		[Association(Name="Client_Contract", Storage="_BuyerClient", ThisKey="BuyerNo", IsForeignKey=true)]
		public Client BuyerClient
		{
			get
			{
				return this._BuyerClient.Entity;
			}
			set
			{
				Client previousValue = this._BuyerClient.Entity;
				if (((previousValue != value) 
							|| (this._BuyerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyerClient.Entity = null;
						previousValue.BuyerContracts.Remove(this);
					}
					this._BuyerClient.Entity = value;
					if ((value != null))
					{
						value.BuyerContracts.Add(this);
						this._BuyerNo = value.EDINo;
					}
					else
					{
						this._BuyerNo = default(string);
					}
					this.SendPropertyChanged("BuyerClient");
				}
			}
		}
		
		[Association(Name="Branch_Contract1", Storage="_SellerBranch", ThisKey="SellerBranchID", IsForeignKey=true)]
		public Branch SellerBranch
		{
			get
			{
				return this._SellerBranch.Entity;
			}
			set
			{
				Branch previousValue = this._SellerBranch.Entity;
				if (((previousValue != value) 
							|| (this._SellerBranch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellerBranch.Entity = null;
						previousValue.SellerContracts.Remove(this);
					}
					this._SellerBranch.Entity = value;
					if ((value != null))
					{
						value.SellerContracts.Add(this);
						this._SellerBranchID = value.BranchID;
					}
					else
					{
						this._SellerBranchID = default(string);
					}
					this.SendPropertyChanged("SellerBranch");
				}
			}
		}
		
		[Association(Name="Client_Contract1", Storage="_SellerClient", ThisKey="SellerNo", IsForeignKey=true)]
		public Client SellerClient
		{
			get
			{
				return this._SellerClient.Entity;
			}
			set
			{
				Client previousValue = this._SellerClient.Entity;
				if (((previousValue != value) 
							|| (this._SellerClient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellerClient.Entity = null;
						previousValue.SellerContracts.Remove(this);
					}
					this._SellerClient.Entity = value;
					if ((value != null))
					{
						value.SellerContracts.Add(this);
						this._SellerNo = value.EDINo;
					}
					else
					{
						this._SellerNo = default(string);
					}
					this.SendPropertyChanged("SellerClient");
				}
			}
		}
		
		[Association(Name="Currency_Contract", Storage="_CreditCoverCurrency", ThisKey="CreditCoverCurr", IsForeignKey=true)]
		public Currency CreditCoverCurrency
		{
			get
			{
				return this._CreditCoverCurrency.Entity;
			}
			set
			{
				Currency previousValue = this._CreditCoverCurrency.Entity;
				if (((previousValue != value) 
							|| (this._CreditCoverCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreditCoverCurrency.Entity = null;
						previousValue.CreditCoverContracts.Remove(this);
					}
					this._CreditCoverCurrency.Entity = value;
					if ((value != null))
					{
						value.CreditCoverContracts.Add(this);
						this._CreditCoverCurr = value.CurrencyCode;
					}
					else
					{
						this._CreditCoverCurr = default(string);
					}
					this.SendPropertyChanged("CreditCoverCurrency");
				}
			}
		}
		
		[Association(Name="Currency_Contract1", Storage="_FinanceLineCurrency", ThisKey="FinanceLineCurr", IsForeignKey=true)]
		public Currency FinanceLineCurrency
		{
			get
			{
				return this._FinanceLineCurrency.Entity;
			}
			set
			{
				Currency previousValue = this._FinanceLineCurrency.Entity;
				if (((previousValue != value) 
							|| (this._FinanceLineCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinanceLineCurrency.Entity = null;
						previousValue.FinanceLineContracts.Remove(this);
					}
					this._FinanceLineCurrency.Entity = value;
					if ((value != null))
					{
						value.FinanceLineContracts.Add(this);
						this._FinanceLineCurr = value.CurrencyCode;
					}
					else
					{
						this._FinanceLineCurr = default(string);
					}
					this.SendPropertyChanged("FinanceLineCurrency");
				}
			}
		}
		
		[Association(Name="Currency_Contract2", Storage="_HandFeeCurrency", ThisKey="HandFeeCurr", IsForeignKey=true)]
		public Currency HandFeeCurrency
		{
			get
			{
				return this._HandFeeCurrency.Entity;
			}
			set
			{
				Currency previousValue = this._HandFeeCurrency.Entity;
				if (((previousValue != value) 
							|| (this._HandFeeCurrency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HandFeeCurrency.Entity = null;
						previousValue.HandFeeContracts.Remove(this);
					}
					this._HandFeeCurrency.Entity = value;
					if ((value != null))
					{
						value.HandFeeContracts.Add(this);
						this._HandFeeCurr = value.CurrencyCode;
					}
					else
					{
						this._HandFeeCurr = default(string);
					}
					this.SendPropertyChanged("HandFeeCurrency");
				}
			}
		}
		
		[Association(Name="Factor_Contract", Storage="_BuyerFactor", ThisKey="BuyerFactorNo", IsForeignKey=true)]
		public Factor BuyerFactor
		{
			get
			{
				return this._BuyerFactor.Entity;
			}
			set
			{
				Factor previousValue = this._BuyerFactor.Entity;
				if (((previousValue != value) 
							|| (this._BuyerFactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyerFactor.Entity = null;
						previousValue.BuyerContracts.Remove(this);
					}
					this._BuyerFactor.Entity = value;
					if ((value != null))
					{
						value.BuyerContracts.Add(this);
						this._BuyerFactorNo = value.FactorCode;
					}
					else
					{
						this._BuyerFactorNo = default(string);
					}
					this.SendPropertyChanged("BuyerFactor");
				}
			}
		}
		
		[Association(Name="Factor_Contract1", Storage="_SellerFactor", ThisKey="SellerFactorNo", IsForeignKey=true)]
		public Factor SellerFactor
		{
			get
			{
				return this._SellerFactor.Entity;
			}
			set
			{
				Factor previousValue = this._SellerFactor.Entity;
				if (((previousValue != value) 
							|| (this._SellerFactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellerFactor.Entity = null;
						previousValue.SellerContracts.Remove(this);
					}
					this._SellerFactor.Entity = value;
					if ((value != null))
					{
						value.SellerContracts.Add(this);
						this._SellerFactorNo = value.FactorCode;
					}
					else
					{
						this._SellerFactorNo = default(string);
					}
					this.SendPropertyChanged("SellerFactor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignBatches(AssignBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_AssignBatches(AssignBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_FinanceBatches(FinanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_FinanceBatches(FinanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
		
		private void attach_PaymentBatches(PaymentBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_PaymentBatches(PaymentBatch entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _CountryNameEN;
		
		private string _CountryNameCN;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameENChanging(string value);
    partial void OnCountryNameENChanged();
    partial void OnCountryNameCNChanging(string value);
    partial void OnCountryNameCNChanged();
    #endregion
		
		public Country()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryNameEN", DbType="VarChar(30)")]
		public string CountryNameEN
		{
			get
			{
				return this._CountryNameEN;
			}
			set
			{
				if ((this._CountryNameEN != value))
				{
					this.OnCountryNameENChanging(value);
					this.SendPropertyChanging();
					this._CountryNameEN = value;
					this.SendPropertyChanged("CountryNameEN");
					this.OnCountryNameENChanged();
				}
			}
		}
		
		[Column(Storage="_CountryNameCN", DbType="NVarChar(50)")]
		public string CountryNameCN
		{
			get
			{
				return this._CountryNameCN;
			}
			set
			{
				if ((this._CountryNameCN != value))
				{
					this.OnCountryNameCNChanging(value);
					this.SendPropertyChanging();
					this._CountryNameCN = value;
					this.SendPropertyChanged("CountryNameCN");
					this.OnCountryNameCNChanged();
				}
			}
		}
		
		[Association(Name="Country_Client", Storage="_Clients", OtherKey="CountryCode")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CurrencyCode;
		
		private string _CurrencyName;
		
		private EntitySet<AssignBatch> _AssignBatches;
		
		private EntitySet<ClientAccount> _ClientAccounts;
		
		private EntitySet<ClientCreditLine> _ClientCreditLines;
		
		private EntitySet<Contract> _CreditCoverContracts;
		
		private EntitySet<Contract> _FinanceLineContracts;
		
		private EntitySet<Contract> _HandFeeContracts;
		
		private EntitySet<FactorAccount> _FactorAccounts;
		
		private EntitySet<FactorCreditLine> _FactorCreditLines;
		
		private EntitySet<FinanceBatch> _FinanceBatches;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyCodeChanging(string value);
    partial void OnCurrencyCodeChanged();
    partial void OnCurrencyNameChanging(string value);
    partial void OnCurrencyNameChanged();
    #endregion
		
		public Currency()
		{
			this._AssignBatches = new EntitySet<AssignBatch>(new Action<AssignBatch>(this.attach_AssignBatches), new Action<AssignBatch>(this.detach_AssignBatches));
			this._ClientAccounts = new EntitySet<ClientAccount>(new Action<ClientAccount>(this.attach_ClientAccounts), new Action<ClientAccount>(this.detach_ClientAccounts));
			this._ClientCreditLines = new EntitySet<ClientCreditLine>(new Action<ClientCreditLine>(this.attach_ClientCreditLines), new Action<ClientCreditLine>(this.detach_ClientCreditLines));
			this._CreditCoverContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_CreditCoverContracts), new Action<Contract>(this.detach_CreditCoverContracts));
			this._FinanceLineContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_FinanceLineContracts), new Action<Contract>(this.detach_FinanceLineContracts));
			this._HandFeeContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_HandFeeContracts), new Action<Contract>(this.detach_HandFeeContracts));
			this._FactorAccounts = new EntitySet<FactorAccount>(new Action<FactorAccount>(this.attach_FactorAccounts), new Action<FactorAccount>(this.detach_FactorAccounts));
			this._FactorCreditLines = new EntitySet<FactorCreditLine>(new Action<FactorCreditLine>(this.attach_FactorCreditLines), new Action<FactorCreditLine>(this.detach_FactorCreditLines));
			this._FinanceBatches = new EntitySet<FinanceBatch>(new Action<FinanceBatch>(this.attach_FinanceBatches), new Action<FinanceBatch>(this.detach_FinanceBatches));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[Column(Storage="_CurrencyCode", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CurrencyCode
		{
			get
			{
				return this._CurrencyCode;
			}
			set
			{
				if ((this._CurrencyCode != value))
				{
					this.OnCurrencyCodeChanging(value);
					this.SendPropertyChanging();
					this._CurrencyCode = value;
					this.SendPropertyChanged("CurrencyCode");
					this.OnCurrencyCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CurrencyName
		{
			get
			{
				return this._CurrencyName;
			}
			set
			{
				if ((this._CurrencyName != value))
				{
					this.OnCurrencyNameChanging(value);
					this.SendPropertyChanging();
					this._CurrencyName = value;
					this.SendPropertyChanged("CurrencyName");
					this.OnCurrencyNameChanged();
				}
			}
		}
		
		[Association(Name="Currency_AssignBatch", Storage="_AssignBatches", OtherKey="BatchCurrency")]
		public EntitySet<AssignBatch> AssignBatches
		{
			get
			{
				return this._AssignBatches;
			}
			set
			{
				this._AssignBatches.Assign(value);
			}
		}
		
		[Association(Name="Currency_ClientAccount", Storage="_ClientAccounts", OtherKey="AccountCurrency")]
		public EntitySet<ClientAccount> ClientAccounts
		{
			get
			{
				return this._ClientAccounts;
			}
			set
			{
				this._ClientAccounts.Assign(value);
			}
		}
		
		[Association(Name="Currency_ClientCreditLine", Storage="_ClientCreditLines", OtherKey="CreditLineCurrency")]
		public EntitySet<ClientCreditLine> ClientCreditLines
		{
			get
			{
				return this._ClientCreditLines;
			}
			set
			{
				this._ClientCreditLines.Assign(value);
			}
		}
		
		[Association(Name="Currency_Contract", Storage="_CreditCoverContracts", OtherKey="CreditCoverCurr")]
		public EntitySet<Contract> CreditCoverContracts
		{
			get
			{
				return this._CreditCoverContracts;
			}
			set
			{
				this._CreditCoverContracts.Assign(value);
			}
		}
		
		[Association(Name="Currency_Contract1", Storage="_FinanceLineContracts", OtherKey="FinanceLineCurr")]
		public EntitySet<Contract> FinanceLineContracts
		{
			get
			{
				return this._FinanceLineContracts;
			}
			set
			{
				this._FinanceLineContracts.Assign(value);
			}
		}
		
		[Association(Name="Currency_Contract2", Storage="_HandFeeContracts", OtherKey="HandFeeCurr")]
		public EntitySet<Contract> HandFeeContracts
		{
			get
			{
				return this._HandFeeContracts;
			}
			set
			{
				this._HandFeeContracts.Assign(value);
			}
		}
		
		[Association(Name="Currency_FactorAccount", Storage="_FactorAccounts", OtherKey="AccountCurrency")]
		public EntitySet<FactorAccount> FactorAccounts
		{
			get
			{
				return this._FactorAccounts;
			}
			set
			{
				this._FactorAccounts.Assign(value);
			}
		}
		
		[Association(Name="Currency_FactorCreditLine", Storage="_FactorCreditLines", OtherKey="CreditLineCurrency")]
		public EntitySet<FactorCreditLine> FactorCreditLines
		{
			get
			{
				return this._FactorCreditLines;
			}
			set
			{
				this._FactorCreditLines.Assign(value);
			}
		}
		
		[Association(Name="Currency_FinanceBatch", Storage="_FinanceBatches", OtherKey="BatchConrrency")]
		public EntitySet<FinanceBatch> FinanceBatches
		{
			get
			{
				return this._FinanceBatches;
			}
			set
			{
				this._FinanceBatches.Assign(value);
			}
		}
		
		[Association(Name="Currency_Invoice", Storage="_Invoices", OtherKey="InvoiceCurrency")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignBatches(AssignBatch entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_AssignBatches(AssignBatch entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_ClientAccounts(ClientAccount entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_ClientAccounts(ClientAccount entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_ClientCreditLines(ClientCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_ClientCreditLines(ClientCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_CreditCoverContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.CreditCoverCurrency = this;
		}
		
		private void detach_CreditCoverContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.CreditCoverCurrency = null;
		}
		
		private void attach_FinanceLineContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinanceLineCurrency = this;
		}
		
		private void detach_FinanceLineContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.FinanceLineCurrency = null;
		}
		
		private void attach_HandFeeContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.HandFeeCurrency = this;
		}
		
		private void detach_HandFeeContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.HandFeeCurrency = null;
		}
		
		private void attach_FactorAccounts(FactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_FactorAccounts(FactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_FactorCreditLines(FactorCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_FactorCreditLines(FactorCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_FinanceBatches(FinanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_FinanceBatches(FinanceBatch entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[Table(Name="dbo.Factor")]
	public partial class Factor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FactorCode;
		
		private string _FactorType;
		
		private string _CompanyName;
		
		private string _ShortName;
		
		private string _BranchName;
		
		private string _CountryName;
		
		private string _Department;
		
		private string _PostalAddress_1;
		
		private string _PostalAddress_2;
		
		private string _PostalCodePost;
		
		private string _CityPost;
		
		private string _VisitingAddress_1;
		
		private string _VisitingAddress_2;
		
		private string _PostalCodeVisiting;
		
		private string _CityVisiting;
		
		private string _Email_1;
		
		private string _Email_2;
		
		private string _WebSite;
		
		private string _Telephone_1;
		
		private string _Telephone_2;
		
		private string _Telefax_1;
		
		private string _Telefax_2;
		
		private string _WorkingHours;
		
		private string _GeneralCorrespondence_1;
		
		private string _GeneralCorrespondence_2;
		
		private string _Contacts_1;
		
		private string _Contacts_2;
		
		private string _Contacts_3;
		
		private string _Contacts_4;
		
		private string _Management_1;
		
		private string _Management_2;
		
		private string _Shareholders;
		
		private string _IFISAvailableOnPrivateForum;
		
		private string _MembershipStatus;
		
		private string _MembershipDate;
		
		private string _DateOfLatestRevision;
		
		private string _Comment;
		
		private EntitySet<Contract> _BuyerContracts;
		
		private EntitySet<Contract> _SellerContracts;
		
		private EntitySet<FactorAccount> _FactorAccounts;
		
		private EntitySet<FactorCreditLine> _FactorCreditLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactorCodeChanging(string value);
    partial void OnFactorCodeChanged();
    partial void OnFactorTypeChanging(string value);
    partial void OnFactorTypeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnPostalAddress_1Changing(string value);
    partial void OnPostalAddress_1Changed();
    partial void OnPostalAddress_2Changing(string value);
    partial void OnPostalAddress_2Changed();
    partial void OnPostalCodePostChanging(string value);
    partial void OnPostalCodePostChanged();
    partial void OnCityPostChanging(string value);
    partial void OnCityPostChanged();
    partial void OnVisitingAddress_1Changing(string value);
    partial void OnVisitingAddress_1Changed();
    partial void OnVisitingAddress_2Changing(string value);
    partial void OnVisitingAddress_2Changed();
    partial void OnPostalCodeVisitingChanging(string value);
    partial void OnPostalCodeVisitingChanged();
    partial void OnCityVisitingChanging(string value);
    partial void OnCityVisitingChanged();
    partial void OnEmail_1Changing(string value);
    partial void OnEmail_1Changed();
    partial void OnEmail_2Changing(string value);
    partial void OnEmail_2Changed();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnTelephone_1Changing(string value);
    partial void OnTelephone_1Changed();
    partial void OnTelephone_2Changing(string value);
    partial void OnTelephone_2Changed();
    partial void OnTelefax_1Changing(string value);
    partial void OnTelefax_1Changed();
    partial void OnTelefax_2Changing(string value);
    partial void OnTelefax_2Changed();
    partial void OnWorkingHoursChanging(string value);
    partial void OnWorkingHoursChanged();
    partial void OnGeneralCorrespondence_1Changing(string value);
    partial void OnGeneralCorrespondence_1Changed();
    partial void OnGeneralCorrespondence_2Changing(string value);
    partial void OnGeneralCorrespondence_2Changed();
    partial void OnContacts_1Changing(string value);
    partial void OnContacts_1Changed();
    partial void OnContacts_2Changing(string value);
    partial void OnContacts_2Changed();
    partial void OnContacts_3Changing(string value);
    partial void OnContacts_3Changed();
    partial void OnContacts_4Changing(string value);
    partial void OnContacts_4Changed();
    partial void OnManagement_1Changing(string value);
    partial void OnManagement_1Changed();
    partial void OnManagement_2Changing(string value);
    partial void OnManagement_2Changed();
    partial void OnShareholdersChanging(string value);
    partial void OnShareholdersChanged();
    partial void OnIFISAvailableOnPrivateForumChanging(string value);
    partial void OnIFISAvailableOnPrivateForumChanged();
    partial void OnMembershipStatusChanging(string value);
    partial void OnMembershipStatusChanged();
    partial void OnMembershipDateChanging(string value);
    partial void OnMembershipDateChanged();
    partial void OnDateOfLatestRevisionChanging(string value);
    partial void OnDateOfLatestRevisionChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Factor()
		{
			this._BuyerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_BuyerContracts), new Action<Contract>(this.detach_BuyerContracts));
			this._SellerContracts = new EntitySet<Contract>(new Action<Contract>(this.attach_SellerContracts), new Action<Contract>(this.detach_SellerContracts));
			this._FactorAccounts = new EntitySet<FactorAccount>(new Action<FactorAccount>(this.attach_FactorAccounts), new Action<FactorAccount>(this.detach_FactorAccounts));
			this._FactorCreditLines = new EntitySet<FactorCreditLine>(new Action<FactorCreditLine>(this.attach_FactorCreditLines), new Action<FactorCreditLine>(this.detach_FactorCreditLines));
			OnCreated();
		}
		
		[Column(Storage="_FactorCode", DbType="Char(7) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FactorCode
		{
			get
			{
				return this._FactorCode;
			}
			set
			{
				if ((this._FactorCode != value))
				{
					this.OnFactorCodeChanging(value);
					this.SendPropertyChanging();
					this._FactorCode = value;
					this.SendPropertyChanged("FactorCode");
					this.OnFactorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FactorType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FactorType
		{
			get
			{
				return this._FactorType;
			}
			set
			{
				if ((this._FactorType != value))
				{
					this.OnFactorTypeChanging(value);
					this.SendPropertyChanging();
					this._FactorType = value;
					this.SendPropertyChanged("FactorType");
					this.OnFactorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="VarChar(200)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(200)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_BranchName", DbType="VarChar(200)")]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryName", DbType="Char(20)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Department", DbType="NVarChar(200)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_PostalAddress_1", DbType="NVarChar(200)")]
		public string PostalAddress_1
		{
			get
			{
				return this._PostalAddress_1;
			}
			set
			{
				if ((this._PostalAddress_1 != value))
				{
					this.OnPostalAddress_1Changing(value);
					this.SendPropertyChanging();
					this._PostalAddress_1 = value;
					this.SendPropertyChanged("PostalAddress_1");
					this.OnPostalAddress_1Changed();
				}
			}
		}
		
		[Column(Storage="_PostalAddress_2", DbType="NVarChar(200)")]
		public string PostalAddress_2
		{
			get
			{
				return this._PostalAddress_2;
			}
			set
			{
				if ((this._PostalAddress_2 != value))
				{
					this.OnPostalAddress_2Changing(value);
					this.SendPropertyChanging();
					this._PostalAddress_2 = value;
					this.SendPropertyChanged("PostalAddress_2");
					this.OnPostalAddress_2Changed();
				}
			}
		}
		
		[Column(Storage="_PostalCodePost", DbType="NVarChar(200)")]
		public string PostalCodePost
		{
			get
			{
				return this._PostalCodePost;
			}
			set
			{
				if ((this._PostalCodePost != value))
				{
					this.OnPostalCodePostChanging(value);
					this.SendPropertyChanging();
					this._PostalCodePost = value;
					this.SendPropertyChanged("PostalCodePost");
					this.OnPostalCodePostChanged();
				}
			}
		}
		
		[Column(Storage="_CityPost", DbType="NVarChar(200)")]
		public string CityPost
		{
			get
			{
				return this._CityPost;
			}
			set
			{
				if ((this._CityPost != value))
				{
					this.OnCityPostChanging(value);
					this.SendPropertyChanging();
					this._CityPost = value;
					this.SendPropertyChanged("CityPost");
					this.OnCityPostChanged();
				}
			}
		}
		
		[Column(Storage="_VisitingAddress_1", DbType="NVarChar(200)")]
		public string VisitingAddress_1
		{
			get
			{
				return this._VisitingAddress_1;
			}
			set
			{
				if ((this._VisitingAddress_1 != value))
				{
					this.OnVisitingAddress_1Changing(value);
					this.SendPropertyChanging();
					this._VisitingAddress_1 = value;
					this.SendPropertyChanged("VisitingAddress_1");
					this.OnVisitingAddress_1Changed();
				}
			}
		}
		
		[Column(Storage="_VisitingAddress_2", DbType="NVarChar(200)")]
		public string VisitingAddress_2
		{
			get
			{
				return this._VisitingAddress_2;
			}
			set
			{
				if ((this._VisitingAddress_2 != value))
				{
					this.OnVisitingAddress_2Changing(value);
					this.SendPropertyChanging();
					this._VisitingAddress_2 = value;
					this.SendPropertyChanged("VisitingAddress_2");
					this.OnVisitingAddress_2Changed();
				}
			}
		}
		
		[Column(Storage="_PostalCodeVisiting", DbType="NVarChar(200)")]
		public string PostalCodeVisiting
		{
			get
			{
				return this._PostalCodeVisiting;
			}
			set
			{
				if ((this._PostalCodeVisiting != value))
				{
					this.OnPostalCodeVisitingChanging(value);
					this.SendPropertyChanging();
					this._PostalCodeVisiting = value;
					this.SendPropertyChanged("PostalCodeVisiting");
					this.OnPostalCodeVisitingChanged();
				}
			}
		}
		
		[Column(Storage="_CityVisiting", DbType="NVarChar(200)")]
		public string CityVisiting
		{
			get
			{
				return this._CityVisiting;
			}
			set
			{
				if ((this._CityVisiting != value))
				{
					this.OnCityVisitingChanging(value);
					this.SendPropertyChanging();
					this._CityVisiting = value;
					this.SendPropertyChanged("CityVisiting");
					this.OnCityVisitingChanged();
				}
			}
		}
		
		[Column(Storage="_Email_1", DbType="VarChar(200)")]
		public string Email_1
		{
			get
			{
				return this._Email_1;
			}
			set
			{
				if ((this._Email_1 != value))
				{
					this.OnEmail_1Changing(value);
					this.SendPropertyChanging();
					this._Email_1 = value;
					this.SendPropertyChanged("Email_1");
					this.OnEmail_1Changed();
				}
			}
		}
		
		[Column(Storage="_Email_2", DbType="VarChar(200)")]
		public string Email_2
		{
			get
			{
				return this._Email_2;
			}
			set
			{
				if ((this._Email_2 != value))
				{
					this.OnEmail_2Changing(value);
					this.SendPropertyChanging();
					this._Email_2 = value;
					this.SendPropertyChanged("Email_2");
					this.OnEmail_2Changed();
				}
			}
		}
		
		[Column(Storage="_WebSite", DbType="VarChar(200)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone_1", DbType="VarChar(50)")]
		public string Telephone_1
		{
			get
			{
				return this._Telephone_1;
			}
			set
			{
				if ((this._Telephone_1 != value))
				{
					this.OnTelephone_1Changing(value);
					this.SendPropertyChanging();
					this._Telephone_1 = value;
					this.SendPropertyChanged("Telephone_1");
					this.OnTelephone_1Changed();
				}
			}
		}
		
		[Column(Storage="_Telephone_2", DbType="VarChar(50)")]
		public string Telephone_2
		{
			get
			{
				return this._Telephone_2;
			}
			set
			{
				if ((this._Telephone_2 != value))
				{
					this.OnTelephone_2Changing(value);
					this.SendPropertyChanging();
					this._Telephone_2 = value;
					this.SendPropertyChanged("Telephone_2");
					this.OnTelephone_2Changed();
				}
			}
		}
		
		[Column(Storage="_Telefax_1", DbType="VarChar(50)")]
		public string Telefax_1
		{
			get
			{
				return this._Telefax_1;
			}
			set
			{
				if ((this._Telefax_1 != value))
				{
					this.OnTelefax_1Changing(value);
					this.SendPropertyChanging();
					this._Telefax_1 = value;
					this.SendPropertyChanged("Telefax_1");
					this.OnTelefax_1Changed();
				}
			}
		}
		
		[Column(Storage="_Telefax_2", DbType="VarChar(50)")]
		public string Telefax_2
		{
			get
			{
				return this._Telefax_2;
			}
			set
			{
				if ((this._Telefax_2 != value))
				{
					this.OnTelefax_2Changing(value);
					this.SendPropertyChanging();
					this._Telefax_2 = value;
					this.SendPropertyChanged("Telefax_2");
					this.OnTelefax_2Changed();
				}
			}
		}
		
		[Column(Storage="_WorkingHours", DbType="VarChar(100)")]
		public string WorkingHours
		{
			get
			{
				return this._WorkingHours;
			}
			set
			{
				if ((this._WorkingHours != value))
				{
					this.OnWorkingHoursChanging(value);
					this.SendPropertyChanging();
					this._WorkingHours = value;
					this.SendPropertyChanged("WorkingHours");
					this.OnWorkingHoursChanged();
				}
			}
		}
		
		[Column(Storage="_GeneralCorrespondence_1", DbType="NVarChar(200)")]
		public string GeneralCorrespondence_1
		{
			get
			{
				return this._GeneralCorrespondence_1;
			}
			set
			{
				if ((this._GeneralCorrespondence_1 != value))
				{
					this.OnGeneralCorrespondence_1Changing(value);
					this.SendPropertyChanging();
					this._GeneralCorrespondence_1 = value;
					this.SendPropertyChanged("GeneralCorrespondence_1");
					this.OnGeneralCorrespondence_1Changed();
				}
			}
		}
		
		[Column(Storage="_GeneralCorrespondence_2", DbType="NVarChar(200)")]
		public string GeneralCorrespondence_2
		{
			get
			{
				return this._GeneralCorrespondence_2;
			}
			set
			{
				if ((this._GeneralCorrespondence_2 != value))
				{
					this.OnGeneralCorrespondence_2Changing(value);
					this.SendPropertyChanging();
					this._GeneralCorrespondence_2 = value;
					this.SendPropertyChanged("GeneralCorrespondence_2");
					this.OnGeneralCorrespondence_2Changed();
				}
			}
		}
		
		[Column(Storage="_Contacts_1", DbType="NVarChar(500)")]
		public string Contacts_1
		{
			get
			{
				return this._Contacts_1;
			}
			set
			{
				if ((this._Contacts_1 != value))
				{
					this.OnContacts_1Changing(value);
					this.SendPropertyChanging();
					this._Contacts_1 = value;
					this.SendPropertyChanged("Contacts_1");
					this.OnContacts_1Changed();
				}
			}
		}
		
		[Column(Storage="_Contacts_2", DbType="NVarChar(500)")]
		public string Contacts_2
		{
			get
			{
				return this._Contacts_2;
			}
			set
			{
				if ((this._Contacts_2 != value))
				{
					this.OnContacts_2Changing(value);
					this.SendPropertyChanging();
					this._Contacts_2 = value;
					this.SendPropertyChanged("Contacts_2");
					this.OnContacts_2Changed();
				}
			}
		}
		
		[Column(Storage="_Contacts_3", DbType="NVarChar(500)")]
		public string Contacts_3
		{
			get
			{
				return this._Contacts_3;
			}
			set
			{
				if ((this._Contacts_3 != value))
				{
					this.OnContacts_3Changing(value);
					this.SendPropertyChanging();
					this._Contacts_3 = value;
					this.SendPropertyChanged("Contacts_3");
					this.OnContacts_3Changed();
				}
			}
		}
		
		[Column(Storage="_Contacts_4", DbType="NVarChar(500)")]
		public string Contacts_4
		{
			get
			{
				return this._Contacts_4;
			}
			set
			{
				if ((this._Contacts_4 != value))
				{
					this.OnContacts_4Changing(value);
					this.SendPropertyChanging();
					this._Contacts_4 = value;
					this.SendPropertyChanged("Contacts_4");
					this.OnContacts_4Changed();
				}
			}
		}
		
		[Column(Storage="_Management_1", DbType="NVarChar(200)")]
		public string Management_1
		{
			get
			{
				return this._Management_1;
			}
			set
			{
				if ((this._Management_1 != value))
				{
					this.OnManagement_1Changing(value);
					this.SendPropertyChanging();
					this._Management_1 = value;
					this.SendPropertyChanged("Management_1");
					this.OnManagement_1Changed();
				}
			}
		}
		
		[Column(Storage="_Management_2", DbType="NVarChar(200)")]
		public string Management_2
		{
			get
			{
				return this._Management_2;
			}
			set
			{
				if ((this._Management_2 != value))
				{
					this.OnManagement_2Changing(value);
					this.SendPropertyChanging();
					this._Management_2 = value;
					this.SendPropertyChanged("Management_2");
					this.OnManagement_2Changed();
				}
			}
		}
		
		[Column(Storage="_Shareholders", DbType="NVarChar(500)")]
		public string Shareholders
		{
			get
			{
				return this._Shareholders;
			}
			set
			{
				if ((this._Shareholders != value))
				{
					this.OnShareholdersChanging(value);
					this.SendPropertyChanging();
					this._Shareholders = value;
					this.SendPropertyChanged("Shareholders");
					this.OnShareholdersChanged();
				}
			}
		}
		
		[Column(Storage="_IFISAvailableOnPrivateForum", DbType="VarChar(5)")]
		public string IFISAvailableOnPrivateForum
		{
			get
			{
				return this._IFISAvailableOnPrivateForum;
			}
			set
			{
				if ((this._IFISAvailableOnPrivateForum != value))
				{
					this.OnIFISAvailableOnPrivateForumChanging(value);
					this.SendPropertyChanging();
					this._IFISAvailableOnPrivateForum = value;
					this.SendPropertyChanged("IFISAvailableOnPrivateForum");
					this.OnIFISAvailableOnPrivateForumChanged();
				}
			}
		}
		
		[Column(Storage="_MembershipStatus", DbType="VarChar(50)")]
		public string MembershipStatus
		{
			get
			{
				return this._MembershipStatus;
			}
			set
			{
				if ((this._MembershipStatus != value))
				{
					this.OnMembershipStatusChanging(value);
					this.SendPropertyChanging();
					this._MembershipStatus = value;
					this.SendPropertyChanged("MembershipStatus");
					this.OnMembershipStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MembershipDate", DbType="VarChar(50)")]
		public string MembershipDate
		{
			get
			{
				return this._MembershipDate;
			}
			set
			{
				if ((this._MembershipDate != value))
				{
					this.OnMembershipDateChanging(value);
					this.SendPropertyChanging();
					this._MembershipDate = value;
					this.SendPropertyChanged("MembershipDate");
					this.OnMembershipDateChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfLatestRevision", DbType="VarChar(50)")]
		public string DateOfLatestRevision
		{
			get
			{
				return this._DateOfLatestRevision;
			}
			set
			{
				if ((this._DateOfLatestRevision != value))
				{
					this.OnDateOfLatestRevisionChanging(value);
					this.SendPropertyChanging();
					this._DateOfLatestRevision = value;
					this.SendPropertyChanged("DateOfLatestRevision");
					this.OnDateOfLatestRevisionChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Factor_Contract", Storage="_BuyerContracts", OtherKey="BuyerFactorNo")]
		public EntitySet<Contract> BuyerContracts
		{
			get
			{
				return this._BuyerContracts;
			}
			set
			{
				this._BuyerContracts.Assign(value);
			}
		}
		
		[Association(Name="Factor_Contract1", Storage="_SellerContracts", OtherKey="SellerFactorNo")]
		public EntitySet<Contract> SellerContracts
		{
			get
			{
				return this._SellerContracts;
			}
			set
			{
				this._SellerContracts.Assign(value);
			}
		}
		
		[Association(Name="Factor_FactorAccount", Storage="_FactorAccounts", OtherKey="FactorCode")]
		public EntitySet<FactorAccount> FactorAccounts
		{
			get
			{
				return this._FactorAccounts;
			}
			set
			{
				this._FactorAccounts.Assign(value);
			}
		}
		
		[Association(Name="Factor_FactorCreditLine", Storage="_FactorCreditLines", OtherKey="FactorCode")]
		public EntitySet<FactorCreditLine> FactorCreditLines
		{
			get
			{
				return this._FactorCreditLines;
			}
			set
			{
				this._FactorCreditLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerFactor = this;
		}
		
		private void detach_BuyerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.BuyerFactor = null;
		}
		
		private void attach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerFactor = this;
		}
		
		private void detach_SellerContracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.SellerFactor = null;
		}
		
		private void attach_FactorAccounts(FactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Factor = this;
		}
		
		private void detach_FactorAccounts(FactorAccount entity)
		{
			this.SendPropertyChanging();
			entity.Factor = null;
		}
		
		private void attach_FactorCreditLines(FactorCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Factor = this;
		}
		
		private void detach_FactorCreditLines(FactorCreditLine entity)
		{
			this.SendPropertyChanging();
			entity.Factor = null;
		}
	}
	
	[Table(Name="dbo.FactorAccount")]
	public partial class FactorAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountID;
		
		private string _FactorCode;
		
		private string _AccountNo;
		
		private string _AccountCurrency;
		
		private string _AccountType;
		
		private string _AccountSWIFT;
		
		private string _HaveInterAccount;
		
		private string _IntermediaryBank;
		
		private string _InterBankSWIFT;
		
		private string _IsDefault;
		
		private string _Commment;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Factor> _Factor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnFactorCodeChanging(string value);
    partial void OnFactorCodeChanged();
    partial void OnAccountNoChanging(string value);
    partial void OnAccountNoChanged();
    partial void OnAccountCurrencyChanging(string value);
    partial void OnAccountCurrencyChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnAccountSWIFTChanging(string value);
    partial void OnAccountSWIFTChanged();
    partial void OnHaveInterAccountChanging(string value);
    partial void OnHaveInterAccountChanged();
    partial void OnIntermediaryBankChanging(string value);
    partial void OnIntermediaryBankChanged();
    partial void OnInterBankSWIFTChanging(string value);
    partial void OnInterBankSWIFTChanged();
    partial void OnIsDefaultChanging(string value);
    partial void OnIsDefaultChanged();
    partial void OnCommmentChanging(string value);
    partial void OnCommmentChanged();
    #endregion
		
		public FactorAccount()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Factor = default(EntityRef<Factor>);
			OnCreated();
		}
		
		[Column(Storage="_AccountID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactorCode", DbType="Char(7)")]
		public string FactorCode
		{
			get
			{
				return this._FactorCode;
			}
			set
			{
				if ((this._FactorCode != value))
				{
					if (this._Factor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorCodeChanging(value);
					this.SendPropertyChanging();
					this._FactorCode = value;
					this.SendPropertyChanged("FactorCode");
					this.OnFactorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNo", DbType="VarChar(200)")]
		public string AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[Column(Storage="_AccountCurrency", DbType="NChar(3)")]
		public string AccountCurrency
		{
			get
			{
				return this._AccountCurrency;
			}
			set
			{
				if ((this._AccountCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountCurrencyChanging(value);
					this.SendPropertyChanging();
					this._AccountCurrency = value;
					this.SendPropertyChanged("AccountCurrency");
					this.OnAccountCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_AccountType", DbType="NVarChar(50)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AccountSWIFT", DbType="NChar(50)")]
		public string AccountSWIFT
		{
			get
			{
				return this._AccountSWIFT;
			}
			set
			{
				if ((this._AccountSWIFT != value))
				{
					this.OnAccountSWIFTChanging(value);
					this.SendPropertyChanging();
					this._AccountSWIFT = value;
					this.SendPropertyChanged("AccountSWIFT");
					this.OnAccountSWIFTChanged();
				}
			}
		}
		
		[Column(Storage="_HaveInterAccount", DbType="NVarChar(50)")]
		public string HaveInterAccount
		{
			get
			{
				return this._HaveInterAccount;
			}
			set
			{
				if ((this._HaveInterAccount != value))
				{
					this.OnHaveInterAccountChanging(value);
					this.SendPropertyChanging();
					this._HaveInterAccount = value;
					this.SendPropertyChanged("HaveInterAccount");
					this.OnHaveInterAccountChanged();
				}
			}
		}
		
		[Column(Storage="_IntermediaryBank", DbType="NVarChar(50)")]
		public string IntermediaryBank
		{
			get
			{
				return this._IntermediaryBank;
			}
			set
			{
				if ((this._IntermediaryBank != value))
				{
					this.OnIntermediaryBankChanging(value);
					this.SendPropertyChanging();
					this._IntermediaryBank = value;
					this.SendPropertyChanged("IntermediaryBank");
					this.OnIntermediaryBankChanged();
				}
			}
		}
		
		[Column(Storage="_InterBankSWIFT", DbType="NChar(50)")]
		public string InterBankSWIFT
		{
			get
			{
				return this._InterBankSWIFT;
			}
			set
			{
				if ((this._InterBankSWIFT != value))
				{
					this.OnInterBankSWIFTChanging(value);
					this.SendPropertyChanging();
					this._InterBankSWIFT = value;
					this.SendPropertyChanged("InterBankSWIFT");
					this.OnInterBankSWIFTChanged();
				}
			}
		}
		
		[Column(Storage="_IsDefault", DbType="VarChar(5)")]
		public string IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[Column(Storage="_Commment", DbType="NVarChar(200)")]
		public string Commment
		{
			get
			{
				return this._Commment;
			}
			set
			{
				if ((this._Commment != value))
				{
					this.OnCommmentChanging(value);
					this.SendPropertyChanging();
					this._Commment = value;
					this.SendPropertyChanged("Commment");
					this.OnCommmentChanged();
				}
			}
		}
		
		[Association(Name="Currency_FactorAccount", Storage="_Currency", ThisKey="AccountCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.FactorAccounts.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.FactorAccounts.Add(this);
						this._AccountCurrency = value.CurrencyCode;
					}
					else
					{
						this._AccountCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="Factor_FactorAccount", Storage="_Factor", ThisKey="FactorCode", IsForeignKey=true)]
		public Factor Factor
		{
			get
			{
				return this._Factor.Entity;
			}
			set
			{
				Factor previousValue = this._Factor.Entity;
				if (((previousValue != value) 
							|| (this._Factor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Factor.Entity = null;
						previousValue.FactorAccounts.Remove(this);
					}
					this._Factor.Entity = value;
					if ((value != null))
					{
						value.FactorAccounts.Add(this);
						this._FactorCode = value.FactorCode;
					}
					else
					{
						this._FactorCode = default(string);
					}
					this.SendPropertyChanged("Factor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactorCreditLine")]
	public partial class FactorCreditLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CreditLineID;
		
		private string _FactorCode;
		
		private string _CreditLineType;
		
		private string _CreditLineCurrency;
		
		private System.Nullable<double> _CreditLineLimit;
		
		private System.Nullable<System.DateTime> _PeriodBegin;
		
		private System.Nullable<System.DateTime> _PeriodEnd;
		
		private string _AuthorizationNo;
		
		private string _Comment;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Factor> _Factor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreditLineIDChanging(string value);
    partial void OnCreditLineIDChanged();
    partial void OnFactorCodeChanging(string value);
    partial void OnFactorCodeChanged();
    partial void OnCreditLineTypeChanging(string value);
    partial void OnCreditLineTypeChanged();
    partial void OnCreditLineCurrencyChanging(string value);
    partial void OnCreditLineCurrencyChanged();
    partial void OnCreditLineLimitChanging(System.Nullable<double> value);
    partial void OnCreditLineLimitChanged();
    partial void OnPeriodBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodBeginChanged();
    partial void OnPeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnPeriodEndChanged();
    partial void OnAuthorizationNoChanging(string value);
    partial void OnAuthorizationNoChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public FactorCreditLine()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Factor = default(EntityRef<Factor>);
			OnCreated();
		}
		
		[Column(Storage="_CreditLineID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CreditLineID
		{
			get
			{
				return this._CreditLineID;
			}
			set
			{
				if ((this._CreditLineID != value))
				{
					this.OnCreditLineIDChanging(value);
					this.SendPropertyChanging();
					this._CreditLineID = value;
					this.SendPropertyChanged("CreditLineID");
					this.OnCreditLineIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactorCode", DbType="Char(7)")]
		public string FactorCode
		{
			get
			{
				return this._FactorCode;
			}
			set
			{
				if ((this._FactorCode != value))
				{
					if (this._Factor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorCodeChanging(value);
					this.SendPropertyChanging();
					this._FactorCode = value;
					this.SendPropertyChanged("FactorCode");
					this.OnFactorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineType", DbType="NVarChar(50)")]
		public string CreditLineType
		{
			get
			{
				return this._CreditLineType;
			}
			set
			{
				if ((this._CreditLineType != value))
				{
					this.OnCreditLineTypeChanging(value);
					this.SendPropertyChanging();
					this._CreditLineType = value;
					this.SendPropertyChanged("CreditLineType");
					this.OnCreditLineTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineCurrency", DbType="NChar(3)")]
		public string CreditLineCurrency
		{
			get
			{
				return this._CreditLineCurrency;
			}
			set
			{
				if ((this._CreditLineCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreditLineCurrencyChanging(value);
					this.SendPropertyChanging();
					this._CreditLineCurrency = value;
					this.SendPropertyChanged("CreditLineCurrency");
					this.OnCreditLineCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_CreditLineLimit", DbType="Float")]
		public System.Nullable<double> CreditLineLimit
		{
			get
			{
				return this._CreditLineLimit;
			}
			set
			{
				if ((this._CreditLineLimit != value))
				{
					this.OnCreditLineLimitChanging(value);
					this.SendPropertyChanging();
					this._CreditLineLimit = value;
					this.SendPropertyChanged("CreditLineLimit");
					this.OnCreditLineLimitChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodBegin
		{
			get
			{
				return this._PeriodBegin;
			}
			set
			{
				if ((this._PeriodBegin != value))
				{
					this.OnPeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._PeriodBegin = value;
					this.SendPropertyChanged("PeriodBegin");
					this.OnPeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> PeriodEnd
		{
			get
			{
				return this._PeriodEnd;
			}
			set
			{
				if ((this._PeriodEnd != value))
				{
					this.OnPeriodEndChanging(value);
					this.SendPropertyChanging();
					this._PeriodEnd = value;
					this.SendPropertyChanged("PeriodEnd");
					this.OnPeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationNo", DbType="NVarChar(50)")]
		public string AuthorizationNo
		{
			get
			{
				return this._AuthorizationNo;
			}
			set
			{
				if ((this._AuthorizationNo != value))
				{
					this.OnAuthorizationNoChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationNo = value;
					this.SendPropertyChanged("AuthorizationNo");
					this.OnAuthorizationNoChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="Currency_FactorCreditLine", Storage="_Currency", ThisKey="CreditLineCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.FactorCreditLines.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.FactorCreditLines.Add(this);
						this._CreditLineCurrency = value.CurrencyCode;
					}
					else
					{
						this._CreditLineCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="Factor_FactorCreditLine", Storage="_Factor", ThisKey="FactorCode", IsForeignKey=true)]
		public Factor Factor
		{
			get
			{
				return this._Factor.Entity;
			}
			set
			{
				Factor previousValue = this._Factor.Entity;
				if (((previousValue != value) 
							|| (this._Factor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Factor.Entity = null;
						previousValue.FactorCreditLines.Remove(this);
					}
					this._Factor.Entity = value;
					if ((value != null))
					{
						value.FactorCreditLines.Add(this);
						this._FactorCode = value.FactorCode;
					}
					else
					{
						this._FactorCode = default(string);
					}
					this.SendPropertyChanged("Factor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FinanceBatch")]
	public partial class FinanceBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FinanceBatchNo;
		
		private string _ContractNo;
		
		private string _BatchConrrency;
		
		private System.Nullable<double> _FinanceAmount;
		
		private System.Nullable<System.DateTime> _FinancePeriodBegin;
		
		private System.Nullable<System.DateTime> _FinnacePeriodEnd;
		
		private System.Nullable<double> _InterestRatio;
		
		private string _CreateUserName;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFinanceBatchNoChanging(string value);
    partial void OnFinanceBatchNoChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnBatchConrrencyChanging(string value);
    partial void OnBatchConrrencyChanged();
    partial void OnFinanceAmountChanging(System.Nullable<double> value);
    partial void OnFinanceAmountChanged();
    partial void OnFinancePeriodBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnFinancePeriodBeginChanged();
    partial void OnFinnacePeriodEndChanging(System.Nullable<System.DateTime> value);
    partial void OnFinnacePeriodEndChanged();
    partial void OnInterestRatioChanging(System.Nullable<double> value);
    partial void OnInterestRatioChanged();
    partial void OnCreateUserNameChanging(string value);
    partial void OnCreateUserNameChanged();
    #endregion
		
		public FinanceBatch()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Contract = default(EntityRef<Contract>);
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[Column(Storage="_FinanceBatchNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FinanceBatchNo
		{
			get
			{
				return this._FinanceBatchNo;
			}
			set
			{
				if ((this._FinanceBatchNo != value))
				{
					this.OnFinanceBatchNoChanging(value);
					this.SendPropertyChanging();
					this._FinanceBatchNo = value;
					this.SendPropertyChanged("FinanceBatchNo");
					this.OnFinanceBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[Column(Storage="_BatchConrrency", DbType="NChar(3)")]
		public string BatchConrrency
		{
			get
			{
				return this._BatchConrrency;
			}
			set
			{
				if ((this._BatchConrrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchConrrencyChanging(value);
					this.SendPropertyChanging();
					this._BatchConrrency = value;
					this.SendPropertyChanged("BatchConrrency");
					this.OnBatchConrrencyChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceAmount", DbType="Float")]
		public System.Nullable<double> FinanceAmount
		{
			get
			{
				return this._FinanceAmount;
			}
			set
			{
				if ((this._FinanceAmount != value))
				{
					this.OnFinanceAmountChanging(value);
					this.SendPropertyChanging();
					this._FinanceAmount = value;
					this.SendPropertyChanged("FinanceAmount");
					this.OnFinanceAmountChanged();
				}
			}
		}
		
		[Column(Storage="_FinancePeriodBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinancePeriodBegin
		{
			get
			{
				return this._FinancePeriodBegin;
			}
			set
			{
				if ((this._FinancePeriodBegin != value))
				{
					this.OnFinancePeriodBeginChanging(value);
					this.SendPropertyChanging();
					this._FinancePeriodBegin = value;
					this.SendPropertyChanged("FinancePeriodBegin");
					this.OnFinancePeriodBeginChanged();
				}
			}
		}
		
		[Column(Storage="_FinnacePeriodEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinnacePeriodEnd
		{
			get
			{
				return this._FinnacePeriodEnd;
			}
			set
			{
				if ((this._FinnacePeriodEnd != value))
				{
					this.OnFinnacePeriodEndChanging(value);
					this.SendPropertyChanging();
					this._FinnacePeriodEnd = value;
					this.SendPropertyChanged("FinnacePeriodEnd");
					this.OnFinnacePeriodEndChanged();
				}
			}
		}
		
		[Column(Storage="_InterestRatio", DbType="Float")]
		public System.Nullable<double> InterestRatio
		{
			get
			{
				return this._InterestRatio;
			}
			set
			{
				if ((this._InterestRatio != value))
				{
					this.OnInterestRatioChanging(value);
					this.SendPropertyChanging();
					this._InterestRatio = value;
					this.SendPropertyChanged("InterestRatio");
					this.OnInterestRatioChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserName", DbType="NVarChar(50)")]
		public string CreateUserName
		{
			get
			{
				return this._CreateUserName;
			}
			set
			{
				if ((this._CreateUserName != value))
				{
					this.OnCreateUserNameChanging(value);
					this.SendPropertyChanging();
					this._CreateUserName = value;
					this.SendPropertyChanged("CreateUserName");
					this.OnCreateUserNameChanged();
				}
			}
		}
		
		[Association(Name="FinanceBatch_Invoice", Storage="_Invoices", OtherKey="FinanceBatchNo")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="Contract_FinanceBatch", Storage="_Contract", ThisKey="ContractNo", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.FinanceBatches.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.FinanceBatches.Add(this);
						this._ContractNo = value.ContractNo;
					}
					else
					{
						this._ContractNo = default(string);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[Association(Name="Currency_FinanceBatch", Storage="_Currency", ThisKey="BatchConrrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.FinanceBatches.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.FinanceBatches.Add(this);
						this._BatchConrrency = value.CurrencyCode;
					}
					else
					{
						this._BatchConrrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.FinanceBatch = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.FinanceBatch = null;
		}
	}
	
	[Table(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _InvoiceNo;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private string _InvoiceCurrency;
		
		private string _AssignBatchNo;
		
		private System.Nullable<double> _AssignAmount;
		
		private System.Nullable<System.DateTime> _AssignDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<System.DateTime> _ValueDate;
		
		private string _NetPaymentTerms;
		
		private System.Nullable<int> _PrimaryDiscountDays;
		
		private System.Nullable<double> _PrimaryDiscountRatio;
		
		private System.Nullable<int> _SecondaryDiscountDays;
		
		private System.Nullable<double> _SecondaryDiscountRatio;
		
		private string _PaymentConditions;
		
		private string _OrderNumberReference;
		
		private string _InvoiceReferenceNumber;
		
		private string _IsFlaw;
		
		private string _FlawReason;
		
		private string _ResolveReason;
		
		private System.Nullable<System.DateTime> _ResoveDate;
		
		private string _ResoveUserName;
		
		private string _FinanceBatchNo;
		
		private System.Nullable<double> _FinanceRatio;
		
		private System.Nullable<decimal> _FinanceAmount;
		
		private System.Nullable<System.DateTime> _FinanceDate;
		
		private System.Nullable<System.DateTime> _FinanceDueDate;
		
		private string _PaymentType;
		
		private string _PaymentBatchNo;
		
		private System.Nullable<double> _PaymentAmount;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.Nullable<double> _RefundAmount;
		
		private System.Nullable<System.DateTime> _RefundDate;
		
		private string _Commission;
		
		private System.Nullable<System.DateTime> _CommissionDate;
		
		private string _Interest;
		
		private System.Nullable<System.DateTime> _InterestDate;
		
		private EntityRef<AssignBatch> _AssignBatch;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<FinanceBatch> _FinanceBatch;
		
		private EntityRef<PaymentBatch> _PaymentBatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnInvoiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceDateChanged();
    partial void OnInvoiceCurrencyChanging(string value);
    partial void OnInvoiceCurrencyChanged();
    partial void OnAssignBatchNoChanging(string value);
    partial void OnAssignBatchNoChanged();
    partial void OnAssignAmountChanging(System.Nullable<double> value);
    partial void OnAssignAmountChanged();
    partial void OnAssignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnValueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateChanged();
    partial void OnNetPaymentTermsChanging(string value);
    partial void OnNetPaymentTermsChanged();
    partial void OnPrimaryDiscountDaysChanging(System.Nullable<int> value);
    partial void OnPrimaryDiscountDaysChanged();
    partial void OnPrimaryDiscountRatioChanging(System.Nullable<double> value);
    partial void OnPrimaryDiscountRatioChanged();
    partial void OnSecondaryDiscountDaysChanging(System.Nullable<int> value);
    partial void OnSecondaryDiscountDaysChanged();
    partial void OnSecondaryDiscountRatioChanging(System.Nullable<double> value);
    partial void OnSecondaryDiscountRatioChanged();
    partial void OnPaymentConditionsChanging(string value);
    partial void OnPaymentConditionsChanged();
    partial void OnOrderNumberReferenceChanging(string value);
    partial void OnOrderNumberReferenceChanged();
    partial void OnInvoiceReferenceNumberChanging(string value);
    partial void OnInvoiceReferenceNumberChanged();
    partial void OnIsFlawChanging(string value);
    partial void OnIsFlawChanged();
    partial void OnFlawReasonChanging(string value);
    partial void OnFlawReasonChanged();
    partial void OnResolveReasonChanging(string value);
    partial void OnResolveReasonChanged();
    partial void OnResoveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResoveDateChanged();
    partial void OnResoveUserNameChanging(string value);
    partial void OnResoveUserNameChanged();
    partial void OnFinanceBatchNoChanging(string value);
    partial void OnFinanceBatchNoChanged();
    partial void OnFinanceRatioChanging(System.Nullable<double> value);
    partial void OnFinanceRatioChanged();
    partial void OnFinanceAmountChanging(System.Nullable<decimal> value);
    partial void OnFinanceAmountChanged();
    partial void OnFinanceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinanceDateChanged();
    partial void OnFinanceDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinanceDueDateChanged();
    partial void OnPaymentTypeChanging(string value);
    partial void OnPaymentTypeChanged();
    partial void OnPaymentBatchNoChanging(string value);
    partial void OnPaymentBatchNoChanged();
    partial void OnPaymentAmountChanging(System.Nullable<double> value);
    partial void OnPaymentAmountChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnRefundAmountChanging(System.Nullable<double> value);
    partial void OnRefundAmountChanged();
    partial void OnRefundDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRefundDateChanged();
    partial void OnCommissionChanging(string value);
    partial void OnCommissionChanged();
    partial void OnCommissionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCommissionDateChanged();
    partial void OnInterestChanging(string value);
    partial void OnInterestChanged();
    partial void OnInterestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInterestDateChanged();
    #endregion
		
		public Invoice()
		{
			this._AssignBatch = default(EntityRef<AssignBatch>);
			this._Currency = default(EntityRef<Currency>);
			this._FinanceBatch = default(EntityRef<FinanceBatch>);
			this._PaymentBatch = default(EntityRef<PaymentBatch>);
			OnCreated();
		}
		
		[Column(Storage="_InvoiceNo", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceCurrency", DbType="NChar(3)")]
		public string InvoiceCurrency
		{
			get
			{
				return this._InvoiceCurrency;
			}
			set
			{
				if ((this._InvoiceCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceCurrencyChanging(value);
					this.SendPropertyChanging();
					this._InvoiceCurrency = value;
					this.SendPropertyChanged("InvoiceCurrency");
					this.OnInvoiceCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_AssignBatchNo", DbType="NVarChar(50)")]
		public string AssignBatchNo
		{
			get
			{
				return this._AssignBatchNo;
			}
			set
			{
				if ((this._AssignBatchNo != value))
				{
					if (this._AssignBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignBatchNoChanging(value);
					this.SendPropertyChanging();
					this._AssignBatchNo = value;
					this.SendPropertyChanged("AssignBatchNo");
					this.OnAssignBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_AssignAmount", DbType="Float")]
		public System.Nullable<double> AssignAmount
		{
			get
			{
				return this._AssignAmount;
			}
			set
			{
				if ((this._AssignAmount != value))
				{
					this.OnAssignAmountChanging(value);
					this.SendPropertyChanging();
					this._AssignAmount = value;
					this.SendPropertyChanged("AssignAmount");
					this.OnAssignAmountChanged();
				}
			}
		}
		
		[Column(Storage="_AssignDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AssignDate
		{
			get
			{
				return this._AssignDate;
			}
			set
			{
				if ((this._AssignDate != value))
				{
					this.OnAssignDateChanging(value);
					this.SendPropertyChanging();
					this._AssignDate = value;
					this.SendPropertyChanged("AssignDate");
					this.OnAssignDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValueDate
		{
			get
			{
				return this._ValueDate;
			}
			set
			{
				if ((this._ValueDate != value))
				{
					this.OnValueDateChanging(value);
					this.SendPropertyChanging();
					this._ValueDate = value;
					this.SendPropertyChanged("ValueDate");
					this.OnValueDateChanged();
				}
			}
		}
		
		[Column(Storage="_NetPaymentTerms", DbType="NVarChar(500)")]
		public string NetPaymentTerms
		{
			get
			{
				return this._NetPaymentTerms;
			}
			set
			{
				if ((this._NetPaymentTerms != value))
				{
					this.OnNetPaymentTermsChanging(value);
					this.SendPropertyChanging();
					this._NetPaymentTerms = value;
					this.SendPropertyChanged("NetPaymentTerms");
					this.OnNetPaymentTermsChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryDiscountDays", DbType="Int")]
		public System.Nullable<int> PrimaryDiscountDays
		{
			get
			{
				return this._PrimaryDiscountDays;
			}
			set
			{
				if ((this._PrimaryDiscountDays != value))
				{
					this.OnPrimaryDiscountDaysChanging(value);
					this.SendPropertyChanging();
					this._PrimaryDiscountDays = value;
					this.SendPropertyChanged("PrimaryDiscountDays");
					this.OnPrimaryDiscountDaysChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryDiscountRatio", DbType="Float")]
		public System.Nullable<double> PrimaryDiscountRatio
		{
			get
			{
				return this._PrimaryDiscountRatio;
			}
			set
			{
				if ((this._PrimaryDiscountRatio != value))
				{
					this.OnPrimaryDiscountRatioChanging(value);
					this.SendPropertyChanging();
					this._PrimaryDiscountRatio = value;
					this.SendPropertyChanged("PrimaryDiscountRatio");
					this.OnPrimaryDiscountRatioChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryDiscountDays", DbType="Int")]
		public System.Nullable<int> SecondaryDiscountDays
		{
			get
			{
				return this._SecondaryDiscountDays;
			}
			set
			{
				if ((this._SecondaryDiscountDays != value))
				{
					this.OnSecondaryDiscountDaysChanging(value);
					this.SendPropertyChanging();
					this._SecondaryDiscountDays = value;
					this.SendPropertyChanged("SecondaryDiscountDays");
					this.OnSecondaryDiscountDaysChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryDiscountRatio", DbType="Float")]
		public System.Nullable<double> SecondaryDiscountRatio
		{
			get
			{
				return this._SecondaryDiscountRatio;
			}
			set
			{
				if ((this._SecondaryDiscountRatio != value))
				{
					this.OnSecondaryDiscountRatioChanging(value);
					this.SendPropertyChanging();
					this._SecondaryDiscountRatio = value;
					this.SendPropertyChanged("SecondaryDiscountRatio");
					this.OnSecondaryDiscountRatioChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentConditions", DbType="NChar(10)")]
		public string PaymentConditions
		{
			get
			{
				return this._PaymentConditions;
			}
			set
			{
				if ((this._PaymentConditions != value))
				{
					this.OnPaymentConditionsChanging(value);
					this.SendPropertyChanging();
					this._PaymentConditions = value;
					this.SendPropertyChanged("PaymentConditions");
					this.OnPaymentConditionsChanged();
				}
			}
		}
		
		[Column(Storage="_OrderNumberReference", DbType="NChar(10)")]
		public string OrderNumberReference
		{
			get
			{
				return this._OrderNumberReference;
			}
			set
			{
				if ((this._OrderNumberReference != value))
				{
					this.OnOrderNumberReferenceChanging(value);
					this.SendPropertyChanging();
					this._OrderNumberReference = value;
					this.SendPropertyChanged("OrderNumberReference");
					this.OnOrderNumberReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceReferenceNumber", DbType="NChar(10)")]
		public string InvoiceReferenceNumber
		{
			get
			{
				return this._InvoiceReferenceNumber;
			}
			set
			{
				if ((this._InvoiceReferenceNumber != value))
				{
					this.OnInvoiceReferenceNumberChanging(value);
					this.SendPropertyChanging();
					this._InvoiceReferenceNumber = value;
					this.SendPropertyChanged("InvoiceReferenceNumber");
					this.OnInvoiceReferenceNumberChanged();
				}
			}
		}
		
		[Column(Storage="_IsFlaw", DbType="NChar(10)")]
		public string IsFlaw
		{
			get
			{
				return this._IsFlaw;
			}
			set
			{
				if ((this._IsFlaw != value))
				{
					this.OnIsFlawChanging(value);
					this.SendPropertyChanging();
					this._IsFlaw = value;
					this.SendPropertyChanged("IsFlaw");
					this.OnIsFlawChanged();
				}
			}
		}
		
		[Column(Storage="_FlawReason", DbType="NChar(10)")]
		public string FlawReason
		{
			get
			{
				return this._FlawReason;
			}
			set
			{
				if ((this._FlawReason != value))
				{
					this.OnFlawReasonChanging(value);
					this.SendPropertyChanging();
					this._FlawReason = value;
					this.SendPropertyChanged("FlawReason");
					this.OnFlawReasonChanged();
				}
			}
		}
		
		[Column(Storage="_ResolveReason", DbType="NChar(10)")]
		public string ResolveReason
		{
			get
			{
				return this._ResolveReason;
			}
			set
			{
				if ((this._ResolveReason != value))
				{
					this.OnResolveReasonChanging(value);
					this.SendPropertyChanging();
					this._ResolveReason = value;
					this.SendPropertyChanged("ResolveReason");
					this.OnResolveReasonChanged();
				}
			}
		}
		
		[Column(Storage="_ResoveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResoveDate
		{
			get
			{
				return this._ResoveDate;
			}
			set
			{
				if ((this._ResoveDate != value))
				{
					this.OnResoveDateChanging(value);
					this.SendPropertyChanging();
					this._ResoveDate = value;
					this.SendPropertyChanged("ResoveDate");
					this.OnResoveDateChanged();
				}
			}
		}
		
		[Column(Storage="_ResoveUserName", DbType="NVarChar(50)")]
		public string ResoveUserName
		{
			get
			{
				return this._ResoveUserName;
			}
			set
			{
				if ((this._ResoveUserName != value))
				{
					this.OnResoveUserNameChanging(value);
					this.SendPropertyChanging();
					this._ResoveUserName = value;
					this.SendPropertyChanged("ResoveUserName");
					this.OnResoveUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceBatchNo", DbType="NVarChar(50)")]
		public string FinanceBatchNo
		{
			get
			{
				return this._FinanceBatchNo;
			}
			set
			{
				if ((this._FinanceBatchNo != value))
				{
					if (this._FinanceBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFinanceBatchNoChanging(value);
					this.SendPropertyChanging();
					this._FinanceBatchNo = value;
					this.SendPropertyChanged("FinanceBatchNo");
					this.OnFinanceBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceRatio", DbType="Float")]
		public System.Nullable<double> FinanceRatio
		{
			get
			{
				return this._FinanceRatio;
			}
			set
			{
				if ((this._FinanceRatio != value))
				{
					this.OnFinanceRatioChanging(value);
					this.SendPropertyChanging();
					this._FinanceRatio = value;
					this.SendPropertyChanged("FinanceRatio");
					this.OnFinanceRatioChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceAmount", DbType="Money")]
		public System.Nullable<decimal> FinanceAmount
		{
			get
			{
				return this._FinanceAmount;
			}
			set
			{
				if ((this._FinanceAmount != value))
				{
					this.OnFinanceAmountChanging(value);
					this.SendPropertyChanging();
					this._FinanceAmount = value;
					this.SendPropertyChanged("FinanceAmount");
					this.OnFinanceAmountChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinanceDate
		{
			get
			{
				return this._FinanceDate;
			}
			set
			{
				if ((this._FinanceDate != value))
				{
					this.OnFinanceDateChanging(value);
					this.SendPropertyChanging();
					this._FinanceDate = value;
					this.SendPropertyChanged("FinanceDate");
					this.OnFinanceDateChanged();
				}
			}
		}
		
		[Column(Storage="_FinanceDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinanceDueDate
		{
			get
			{
				return this._FinanceDueDate;
			}
			set
			{
				if ((this._FinanceDueDate != value))
				{
					this.OnFinanceDueDateChanging(value);
					this.SendPropertyChanging();
					this._FinanceDueDate = value;
					this.SendPropertyChanged("FinanceDueDate");
					this.OnFinanceDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentType", DbType="NChar(10)")]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentBatchNo", DbType="NVarChar(50)")]
		public string PaymentBatchNo
		{
			get
			{
				return this._PaymentBatchNo;
			}
			set
			{
				if ((this._PaymentBatchNo != value))
				{
					if (this._PaymentBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentBatchNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentBatchNo = value;
					this.SendPropertyChanged("PaymentBatchNo");
					this.OnPaymentBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentAmount", DbType="Float")]
		public System.Nullable<double> PaymentAmount
		{
			get
			{
				return this._PaymentAmount;
			}
			set
			{
				if ((this._PaymentAmount != value))
				{
					this.OnPaymentAmountChanging(value);
					this.SendPropertyChanging();
					this._PaymentAmount = value;
					this.SendPropertyChanged("PaymentAmount");
					this.OnPaymentAmountChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[Column(Storage="_RefundAmount", DbType="Float")]
		public System.Nullable<double> RefundAmount
		{
			get
			{
				return this._RefundAmount;
			}
			set
			{
				if ((this._RefundAmount != value))
				{
					this.OnRefundAmountChanging(value);
					this.SendPropertyChanging();
					this._RefundAmount = value;
					this.SendPropertyChanged("RefundAmount");
					this.OnRefundAmountChanged();
				}
			}
		}
		
		[Column(Storage="_RefundDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RefundDate
		{
			get
			{
				return this._RefundDate;
			}
			set
			{
				if ((this._RefundDate != value))
				{
					this.OnRefundDateChanging(value);
					this.SendPropertyChanging();
					this._RefundDate = value;
					this.SendPropertyChanged("RefundDate");
					this.OnRefundDateChanged();
				}
			}
		}
		
		[Column(Storage="_Commission", DbType="NChar(10)")]
		public string Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this.OnCommissionChanging(value);
					this.SendPropertyChanging();
					this._Commission = value;
					this.SendPropertyChanged("Commission");
					this.OnCommissionChanged();
				}
			}
		}
		
		[Column(Storage="_CommissionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CommissionDate
		{
			get
			{
				return this._CommissionDate;
			}
			set
			{
				if ((this._CommissionDate != value))
				{
					this.OnCommissionDateChanging(value);
					this.SendPropertyChanging();
					this._CommissionDate = value;
					this.SendPropertyChanged("CommissionDate");
					this.OnCommissionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Interest", DbType="NChar(10)")]
		public string Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[Column(Storage="_InterestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InterestDate
		{
			get
			{
				return this._InterestDate;
			}
			set
			{
				if ((this._InterestDate != value))
				{
					this.OnInterestDateChanging(value);
					this.SendPropertyChanging();
					this._InterestDate = value;
					this.SendPropertyChanged("InterestDate");
					this.OnInterestDateChanged();
				}
			}
		}
		
		[Association(Name="AssignBatch_Invoice", Storage="_AssignBatch", ThisKey="AssignBatchNo", IsForeignKey=true)]
		public AssignBatch AssignBatch
		{
			get
			{
				return this._AssignBatch.Entity;
			}
			set
			{
				AssignBatch previousValue = this._AssignBatch.Entity;
				if (((previousValue != value) 
							|| (this._AssignBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssignBatch.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._AssignBatch.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._AssignBatchNo = value.AssignBatchNo;
					}
					else
					{
						this._AssignBatchNo = default(string);
					}
					this.SendPropertyChanged("AssignBatch");
				}
			}
		}
		
		[Association(Name="Currency_Invoice", Storage="_Currency", ThisKey="InvoiceCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._InvoiceCurrency = value.CurrencyCode;
					}
					else
					{
						this._InvoiceCurrency = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[Association(Name="FinanceBatch_Invoice", Storage="_FinanceBatch", ThisKey="FinanceBatchNo", IsForeignKey=true)]
		public FinanceBatch FinanceBatch
		{
			get
			{
				return this._FinanceBatch.Entity;
			}
			set
			{
				FinanceBatch previousValue = this._FinanceBatch.Entity;
				if (((previousValue != value) 
							|| (this._FinanceBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinanceBatch.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._FinanceBatch.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._FinanceBatchNo = value.FinanceBatchNo;
					}
					else
					{
						this._FinanceBatchNo = default(string);
					}
					this.SendPropertyChanged("FinanceBatch");
				}
			}
		}
		
		[Association(Name="PaymentBatch_Invoice", Storage="_PaymentBatch", ThisKey="PaymentBatchNo", IsForeignKey=true)]
		public PaymentBatch PaymentBatch
		{
			get
			{
				return this._PaymentBatch.Entity;
			}
			set
			{
				PaymentBatch previousValue = this._PaymentBatch.Entity;
				if (((previousValue != value) 
							|| (this._PaymentBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentBatch.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._PaymentBatch.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._PaymentBatchNo = value.PaymentBatchNo;
					}
					else
					{
						this._PaymentBatchNo = default(string);
					}
					this.SendPropertyChanged("PaymentBatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PaymentBatch")]
	public partial class PaymentBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PaymentBatchNo;
		
		private string _ContractNo;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private string _CreateUserName;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentBatchNoChanging(string value);
    partial void OnPaymentBatchNoChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnCreateUserNameChanging(string value);
    partial void OnCreateUserNameChanged();
    #endregion
		
		public PaymentBatch()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[Column(Storage="_PaymentBatchNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PaymentBatchNo
		{
			get
			{
				return this._PaymentBatchNo;
			}
			set
			{
				if ((this._PaymentBatchNo != value))
				{
					this.OnPaymentBatchNoChanging(value);
					this.SendPropertyChanging();
					this._PaymentBatchNo = value;
					this.SendPropertyChanged("PaymentBatchNo");
					this.OnPaymentBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserName", DbType="NVarChar(50)")]
		public string CreateUserName
		{
			get
			{
				return this._CreateUserName;
			}
			set
			{
				if ((this._CreateUserName != value))
				{
					this.OnCreateUserNameChanging(value);
					this.SendPropertyChanging();
					this._CreateUserName = value;
					this.SendPropertyChanged("CreateUserName");
					this.OnCreateUserNameChanged();
				}
			}
		}
		
		[Association(Name="PaymentBatch_Invoice", Storage="_Invoices", OtherKey="PaymentBatchNo")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[Association(Name="Contract_PaymentBatch", Storage="_Contract", ThisKey="ContractNo", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.PaymentBatches.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.PaymentBatches.Add(this);
						this._ContractNo = value.ContractNo;
					}
					else
					{
						this._ContractNo = default(string);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.PaymentBatch = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.PaymentBatch = null;
		}
	}
}
#pragma warning restore 1591
